<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet type="text/xsl"
        href="http://docbook.sourceforge.net/release/xsl/current/manpages/docbook.xsl"?><!--;TMS.apim#MAN(user);UMS.apim#CPP(user);TMS.apim#CPP(user);UMS.apim#PYTHON(user);TMS.apim#PYTHON(user) --><book xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" label="UMS.apim#MAN(user);TMS.apim#MAN(user);FMS.apim#MAN(user);UMS.apim#CPP(user);TMS.apim#CPP(user);FMS.apim#CPP(user);UMS.apim#PYTHON(user);TMS.apim#PYTHON(user);FMS.apim#PYTHON(user)" xsi:noNamespaceSchemaLocation="http://docbook.org/ns/docbook">
<info>
<title>User Manual</title>
<productname>VISHNU</productname>
<releaseinfo>1.0</releaseinfo>
<date>June 21, 2012</date>
<author>
<personname><firstname>Benjamin</firstname><surname>Isnard</surname></personname>
</author>
<author>
<personname><firstname>Daouda</firstname><surname>Traoré</surname></personname>
</author>
<author>
<personname><firstname>Eugène</firstname><surname>Pamba Capo-Chichi</surname></personname>
</author>
<author>
<personname><firstname>Kevin</firstname><surname>Coulomb</surname></personname>
</author>
<author>
<personname><firstname>Ibrahima</firstname><surname>Cissé</surname></personname>
</author>
<author>
<personname><firstname>Rodrigue</firstname><surname>Chakode</surname></personname>
</author>

<title> VISHNU User Manual</title>

<revhistory>
<revision>
<revnumber>1</revnumber>
<date>08/03/2011</date>
<authorinitials>SysFera</authorinitials>
<revdescription>

<para>First version of the VISHNU user manual which concerns only the UMS package.</para></revdescription>
</revision>

<revision>
<revnumber>2</revnumber>
<date>03/05/2011</date>
<authorinitials>SysFera</authorinitials>
<revdescription>

<para>Add of details concerning the TMS package.</para></revdescription>
</revision>
<revision>
<revnumber>3</revnumber>
<date>15/06/2011</date>
<authorinitials>SysFera</authorinitials>
<revdescription>

<para>Add of details concerning the IMS and FMS package.</para></revdescription>
</revision>

<revision>
<revnumber>4</revnumber>
<date>28/06/2011</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Add of TMS generic script example.</para></revdescription>
</revision>
<revision>
<revnumber>5</revnumber>
<date>18/07/2011</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Add of the CLI examples and fix some mistakes..</para></revdescription>
</revision>

<revision>
<revnumber>6</revnumber>
<date>11/08/2011</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Add of SLURM batch scheduler </para></revdescription>
</revision> 

<revision>
<revnumber>7</revnumber>
<date>23/08/2011</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Add the only one local account per machine warning. Add a reference to VISHNU_API </para></revdescription>
</revision> 


<revision>
<revnumber>8</revnumber>
<date>14/12/2011</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Add a section dedicated of the VISHNU Job Output Environment Variables. Add of other syntaxes for VISHNU generic script. Update of vishnu submit job reference, vishnu create dir reference. Add of vishnu_current_session_id a new command line reference. 
Add the use of the .netrc file of the connection and the reconnection.
</para></revdescription>
</revision>


<revision>
<revnumber>9</revnumber>
<date>16/12/2011</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Add a section dedicated of the Configuration of ssh keys required for TMS.
</para></revdescription>
</revision> 

<revision>
<revnumber>10</revnumber>
<date>10/01/2012</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Updates of TMS:</para>
<para>Modified decription of vishnu_submit_job command (to take into account automatic submission).</para>
<para>Extended vishnu_submit_job options (added load criterion option for automatic submission, added option to select a queue automatically).</para>
<para>Modified decription of vishnu_list_jobs command (to take into account listing of jobs on all machines).</para>
<para>Extended vishnu_list_jobs options (added multipleStatus option for combination of several job states, added option to list all jobs submitted by the underlying batch scheduler (VISHNU jobs and jobs submitted out of VISHNU).</para>
<para>Modified decription of submitJob C++ and Python API function (to take into account automatic submission).</para>
<para>Modified decription of listJobs C++ and Python API function (to take into account listing of jobs on all machines).</para>
</revdescription>
</revision>


<revision>
<revnumber>11</revnumber>
<date>06/03/2012</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Add of LSF batch scheduler. </para></revdescription>
</revision> 

<revision>
<revnumber>12</revnumber>
<date>08/03/2012</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Add of VISHNU commands for LDAP support and for connection and reconnection using multiples VISHNU accounts.</para></revdescription>
</revision> 

<revision>
<revnumber>13</revnumber>
<date>11/04/2012</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Add of Grid Engine batch scheduler. </para></revdescription>
</revision> 
<revision>
<revnumber>14</revnumber>
<date>22/05/2012</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Add FAQ section. </para></revdescription>
</revision> 

<revision>
<revnumber>15</revnumber>
<date>21/06/2012</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Add a section for the service vishnu_set_ssh_key in UMS that allows to configure ssh keys for remote accounts. </para>
</revdescription>
</revision> 
<revision>
<revnumber>16</revnumber>
<date>28/06/2012</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Add a section for the copy/move commands in FMS with the client out of the DNS. </para>
</revdescription>
</revision> 
<revision>
<revnumber>17</revnumber>
<date>04/09/2012</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Add option -l on list job. </para>
</revdescription>
</revision>
<revision>
<revnumber>18</revnumber>
<date>07/11/2012</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Add option -S on vishnu_submit_job. </para>
<para>Add of PBSPro batch scheduler </para>
<para>Add default batch options. </para>
</revdescription>
</revision>
<revision>
<revnumber>19</revnumber>
<date>04/12/2012</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Rename of FMS functions according to Posix names. </para>
</revdescription>
</revision>
<revision>
<revnumber>20</revnumber>
<date>21/11/2012</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Update for ZMQ. </para>
</revdescription>
</revision>
<revision>
<revnumber>21</revnumber>
<date>17/12/2012</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Update for posix shell. </para>
</revdescription>
</revision>

<revision>
<revnumber>22</revnumber>
<date>27/02/2013</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Added section related to advanced submissions on cloud resources </para>
</revdescription>
</revision>

<revision>
<revnumber>23</revnumber>
<date>13/06/2013</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Added options for SSL support</para>
</revdescription>
</revision>

<revision>
<revnumber>24</revnumber>
<date>04/11/2013</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Added note about compatibility support</para>
</revdescription>
</revision>
<revision>
<revnumber>25</revnumber>
<date>17/12/2013</date>
<authorinitials>SysFera</authorinitials>
<revdescription>
<para>Added note about batch scheduler variables priority.</para>
</revdescription>
</revision>

<revision>
<revnumber>26</revnumber>
<date>28/02/2014</date>
<authorinitials>K. Coulomb</authorinitials>
<revdescription>
<para>Remove IMS.</para>
</revdescription>
</revision>

</revhistory>

<copyright>
<year>2012</year>
<holder>SysFera SA</holder>
</copyright>
<legalnotice>
<para>These manual pages are provided under the following conditions:</para>
<para>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</para>
<orderedlist>
<listitem>
<para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para>
</listitem>
<listitem>
<para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para>
</listitem>
</orderedlist>
<para>This software is governed by the CECILL licence under French law and
abiding by the rules of distribution of free software. You can use, 
modify and/ or redistribute the software under the terms of the CeCILL
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info".
</para>
<para>As a counterpart to the access to the source code and rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty and the software's author, the holder of the
economic rights, and the successive licensors have only limited
liability.
</para>
<para>In this respect, the user's attention is drawn to the risks associated
with loading, using, modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean that it is complicated to manipulate, and that also
therefore means that it is reserved for developers and experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and, more generally, to use and operate it in the 
same conditions as regards security.</para>
</legalnotice>
</info>


<chapter>
<title>Document presentation</title>
<section>
<title>Document objectives</title>
<para>
This documents is a quick start guide of VISHNU software for users. The main objective of this document is to describe 
the VISHNU installation procedure and the way to use it.
</para>
</section>

<section>
<title>Document structure</title>
<itemizedlist>
<listitem>
<para>Chapter 1 presents the document structure.</para>
</listitem>
<listitem>
<para>Chapter 2 describes the VISHNU software (installation procedure, usage description and troubleshooting).</para>
</listitem>
<listitem>
<para>Chapter 3, Chapter 4, Chapter 5 and Chapter 6 contain the VISHNU commands reference respectively for UMS, TMS and FMS package.</para>
</listitem>
<listitem>
<para>Chapter 7, Chapter 8, Chapter 9 and Chapter 10 contain the C++ API reference respectively for UMS, TMS and FMS package.</para>
</listitem>
<listitem>
<para>Chapter 11, Chapter 12, Chapter 13 and Chapter 14 contain the Python API reference respectively for UMS, TMS and FMS package.</para>
</listitem>
</itemizedlist>
</section>

<section>
<title>References</title>
<para><itemizedlist>
<listitem>
<para>[D1.1b]: VISHNU "Spécifications techniques des besoins"</para>
</listitem>
<listitem>
<para>[VISHNU_API] VISHNU API : Document that contain the VISHNU API description and all the datatypes used.</para>
</listitem>
</itemizedlist></para>
</section>
</chapter>

<!-- PART 1 : VISHNU Presentation -->
<chapter>
<title>Installation and usage</title>
<para>
VISHNU is designed to easy the access to high-performance computing resources. To do that it provides the following services:
<itemizedlist>
<listitem>
<para>User management services (UMS): authentication and session management.</para>
</listitem>
<listitem>
<para>Tasks management services (TMS): submission of tasks (jobs) on computing resources.</para>
</listitem>
<listitem>
<para>File management services (FMS): display and transfer of files between storage resources.</para>
</listitem>
</itemizedlist>
</para>

<section>
<title>Installation procedure of the clients </title>

<para>
This section details the main steps of the installation process for the clients, including the installation requirements [D1.1b].
</para>

<para><emphasis role="bold">Installation requirements (for versions see the STB document):</emphasis></para>
<itemizedlist>
<listitem>
<para>GCC </para>
</listitem>
<listitem>
<para>CMAKE </para>
</listitem>
<listitem>
<para>ZMQ </para>
</listitem>
<listitem>
<para>BOOST </para>
</listitem>
<listitem>
<para>PYTHON </para>
</listitem>
<listitem>
<para>JAVA </para>
</listitem>
<listitem>
<para>SWIG </para>
</listitem>
<listitem>
<para>LIBCRYPT </para>
</listitem>
</itemizedlist>

<para><emphasis role="bold">Installation procedure:</emphasis></para>

<section>
<title>From sources </title>
<para>
<itemizedlist>
<listitem>
<para>Download the VISHNU install sources: git@github.com:SysFera/vishnu.git for the repository </para>
</listitem>
<listitem>
<para>Decompress it (if tarball downloaded) and go to the vishnu directory </para>
</listitem>

<listitem>
<para>Create a build directory and run CMake as follows: </para>
<para>&gt; mkdir build </para>
<para>&gt; cd build </para>
<para>If your install directory is for example: /opt/vishnu </para>
<para>&gt; cmake -DCLIENT_ONLY=ON -DCMAKE_INSTALL_PREFIX=/opt/vishnu .. </para>
<para>&gt; make &amp;&amp; make install</para>
</listitem>

<listitem>
<para>The module for each client can be built using the '-DCOMPILE_*MS=ON' flag. These are some commande line examples on how to build the clients</para>
<itemizedlist>
<listitem>
<para><emphasis role="bold">To compile the UMS package : </emphasis></para>
<para>&gt; cmake -DCOMPILE_UMS=ON -DCMAKE_INSTALL_PREFIX=/opt/vishnu ..</para> 
</listitem>

<listitem>
<para><emphasis role="bold">To compile the TMS package : </emphasis></para>
<para>&gt; cmake -DCOMPILE_UMS=ON -DCOMPILE_TMS=ON -DCMAKE_INSTALL_PREFIX=/opt/vishnu ..</para>
</listitem>
<listitem>
<para><emphasis role="bold">To compile the FMS package : </emphasis></para>
<para>&gt; cmake -DCOMPILE_UMS=ON -DCOMPILE_FMS=ON -DCMAKE_INSTALL_PREFIX=/opt/vishnu ..</para>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</para>

</section> 

<section>
<title>From binaries package </title>
<para>Assuming the dependencies are installed (zmq).
Download the vishnu-client_*_i386.deb, where * stands for the VISHNU version and install it (dpkg -i vishnu_client_*_i386.deb). Then, if the VISHNU hierarchy is already running and accessible from the client, you can use VISHNU. All the services are available in the debian packages.
</para>
</section> 
<section>
<title>Client configuration file</title>
<programlisting>
disp_uriAddr=tcp://127.0.0.1:5560 
ums_uriAddr=tcp://127.0.0.1:5555
timeout=10
</programlisting>
<para>
If there is a server in the configuration file, it is always used, for instance if there is a TMS, it is used althought it does not corresponds the one with the machineid parameter given. If none is found, the dispatcher is used, if no corresponding server and no dispatcher is found, an error is returned.
retryTimeout corresponds to a timeout before relaunching a command if no answer is given (there is up to 3 retries for a client command).
</para>
<para>
From the version 3.1.0, VISHNU supports secured communications through SSL channels. To enable that, you need to compile the software with OpenSSL support, then enable the following configuration keys :
</para>
<itemizedlist>
<listitem>
<para>
<literal>useSsl=1</literal> : this key tells whether to enable SSL communications. If it's set with a non-zero value, the SSL mode will be enabled. Otherwise the SSL mode is disabled (default) 
</para>
</listitem>
<listitem>
<para>
<literal>sslCa=/path/to/cafile</literal> : optionnal, this points to the certificates of the authority of certification. This could be required if you are using a self-signed certificate.
</para>
</listitem>

</itemizedlist>
</section> 
</section>

<section>
<title>Compatibility between versions</title>
<para>VISHNU has a software policy to handle clients and servers versions. These controls are made on the 3 services that are entry points to VISHNU: connect, reconnect and change_password. The rules are the following ones:</para>
<itemizedlist>
<listitem>
  <para>Reject if the major is different</para>
</listitem>
<listitem>
  <para>Reject if the minor of the server is inferior to the minor of the client</para>
</listitem>
</itemizedlist>
</section>

<section>
<title>Software usage description </title>
<para>VISHNU is composed of 4 main packages, one that deals with the users and the machine (UMS), one that deals with the batch schedulers (TMS), and one that deals with the files management (FMS). These clients can be installed altogether or just one or two. Please contact your VISHNU admin to know the corresponding servers you can have before installing the client. It is important to note that the client can be installed without the server being on the platform, the call will end up with an exception and the message "Vishnu not available". Below each package will be described to present the services they offer to the users.</para>
<para>More information about the datatypes can be found in the [VISHNU_API] document.</para>
<para><emphasis role="bold">WARNING: The lists are INOUT parameters, the results are appended, they do not overwrite the existing list. Moreover, the get function on the lists do not check the bounds, it is like using the [] operator.</emphasis></para>
<section><!-- UMS Package -->
<title>UMS package </title> 

<section>
<title>User account creation </title>
<para>
The first step to access VISHNU is to request a new account to a VISHNU administrator. The only information required to create a new account is your full name and email address. You will automatically receive an email containing your userId and password.
</para>
</section>


<section>
<title>Connection to VISHNU </title>
<para>
To connect, use the <emphasis role="bold">vishnu_connect</emphasis> command in the shell terminal (all bourne shells are supported). 
The password received by email is temporary and must be changed at the first connection by using the <emphasis role="bold">vishnu_change_password </emphasis> command. It is also possible to make connection by using the .netrc file. Indeed when the userId and the password are empty, with <emphasis role="bold">vishnu_connect </emphasis> without parameters, the system automatically gets the login and the password from the .netrc file. A vishnu account on the .netrc file can be defined as follows: 

</para>

<para><emphasis role="bold">machine</emphasis> vishnu </para> 
<para><emphasis role="bold">login</emphasis> toto </para>
<para><emphasis role="bold">password</emphasis> pwd </para> 
<para>The values toto and pwd are respectively the userId and the password of a user registered in vishnu and the machine must be named <emphasis role="bold">vishnu</emphasis>.</para>
<para>It is also possible to define a series of VISHNU accounts on the .netrc file. The system will try them each in turn until one which will allow to make a connection. As the .netrc file, the <emphasis role="bold">vishnu_connect_m </emphasis> command allows
to give successively several couples login/password.
</para>
</section>

<section>
<title>Reconnection to VISHNU </title>
<para>
Reconnection is done using the <emphasis role="bold">vishnu_reconnect</emphasis> command. This command allows using an existing session that was previously opened but not closed. It makes it possible to simultaneously use the same session in different shell terminals. A session is what authentifies a user once he has connected. The user does not need password or username when authenticated to use vishnu. Moreover, the session contains the commands made by a user, so he can retrieve the sequence of commands made in a previous work session. 
As previously defined for the connection, the .netrc file can be used for reconnection. 
The <emphasis role="bold">vishnu_reconnect_m </emphasis> command can use several couples login/password for the reconnection. In this previous case, the first parameter must be 
the session identifer.
</para>
</section>


<section>
<title>Session management in VISHNU </title>
<para>
After a successful call to the <emphasis role="bold">vishnu_connect</emphasis> command, a session is created. 
The session is required for calling any other commands. It avoids systematic authentification by userId and password. Only commands <emphasis role="bold">vishnu_connect</emphasis>, <emphasis role="bold">vishnu_reconnect</emphasis> and <emphasis role="bold">vishnu_change_password</emphasis> can be used outside a session by using userId and password. 
The <emphasis role="bold">vishnu_list_history_cmd</emphasis> command lists all the commands launched within a session.
</para>
<para>To prevent unclosed sessions when the <emphasis role="bold">vishnu_close</emphasis> command is not used, the session is automatically closed on timeout or on disconnect (from the terminal). </para> 
<section>
<title>Session close on timeout </title>
<para>
In this mode, the session is automatically closed after an inactivity delay specified by the system or 
configured by the user using the <emphasis role="bold">vishnu_configure_option</emphasis> command.
</para>

</section>
<section>
<title>Session close on disconnect </title>
<para>
In this mode, the session is automatically closed when the shell terminal is closed. It is important to note that the system makes it impossible to close a session while commands are running. In this case, a session with automatic close on disconnect changes the close mode to automatic close on timeout.
</para>
</section>
</section>

<section>
<title>Local user configuration management </title>

<section>
<title>Local user configuration creation </title>
<para>
To access a UNIX account on a specific machine defined on VISHNU, the user must create a local user configuration by using the 
<emphasis role="bold">vishnu_add_local_account</emphasis> command. The <emphasis role="bold">vishnu_list_machines</emphasis> command
gives information about the machines in which a local user configuration can be created or where a local user configuration has already been created. The information 
required to create a new local user configuration are: the userId, the machineId, the login of the UNIX account on the specified machine,
the absolute path to the user's private SSH key (used for file transfers) and the home directory path. 
</para> 
<para><emphasis role="bold">Warning: </emphasis>A unix login can only have one local account on a machine</para>
<para>
The ssh public key of the machine 
named <emphasis role="italic">"userId-machineId"</emphasis> is returned and stored in the $HOME/.vishnu/localAccountPublicKey/ directory
and must be added by the user in the ssh authorized key directory of the UNIX account.
Doing this allows VISHNU to be directly connected on this UNIX account, running tasks as if it was the owner of the UNIX account.
</para>
<para>
With the command <emphasis role="italic">"vishnu_set_ssh_key"</emphasis> you can automatically add a local ssh public key to a remote account (in the authorized_keys file). This command also allows to remove a given key to that file. See the command reference section for the usage. <emphasis role="bold">Note</emphasis> that to enable rollback in case of an inappropriate removal, the command makes a backup of the authorized_keys file in a file named <emphasis role="italic">"authorized_keys.bak"</emphasis> before altering it.
</para>
</section>

<section>
<title>Local user configuration update </title>
<para>
All previous parameters used to create a local user configuration can be updated by using the 
<emphasis role="bold">vishnu_update_local_account</emphasis> command except for userId and machineId. 
</para>
</section>

<section>
<title>Local user configuration remove </title>
<para>
A local user configuration can be removed by using the <emphasis role="bold">vishnu_delete_local_account</emphasis> command.
</para>
</section>
<para>
It is possible to display the local user configurations with the <emphasis role="bold">vishnu_list_local_account</emphasis> command. Other 
commands which are not cited above can be used to display information, such as the <emphasis role="bold">vishnu_list_options</emphasis> command, which 
displays all the options configured by the user, or the <emphasis role="bold">vishnu_list_sessions</emphasis> command, which
displays information about the sessions.
</para>
</section>

<section>
<title>Local user-authentication configuration management </title>

<section>
<title>Local user-authentication configuration creation </title>
<para>
To be authenticated using a VISHNU user-authentication system different of the UMS database, the user must create a local 
user-authentication configuration by using the <emphasis role="bold">vishnu_add_auth_account</emphasis> command. 
The <emphasis role="bold">vishnu_list_auth_systems </emphasis> command
gives information about the user-authentication systems in which a local user-authentication configuration can be created. The information 
required to create a new local user-authentication configuration are: the VISHNU identifier of the user-authentication system and 
the login of the user on this user-authentication system. 
</para> 
<para><emphasis role="bold">Warning: </emphasis> It is possible to define only one local user-authentication configuration on a specific user-authentication system for the same user.</para>	 
</section>

<section>
<title>Local user-authentication configuration update </title>
<para>
Only the login used to create a local user-authentication configuration can be updated by using the 
<emphasis role="bold">vishnu_update_auth_account</emphasis> command. 
</para>
</section>

<section>
<title>Local user-authentication configuration remove </title>
<para>
A local user-authentication configuration can be removed by using the <emphasis role="bold">vishnu_delete_auth_account</emphasis> command.
</para>
</section>
<para>
It is possible to display the local user-authentication configurations with the <emphasis role="bold">vishnu_list_auth_accounts</emphasis> command.
</para>
</section>

</section> <!-- UMS Package -->

<section><!-- TMS Package -->
<title>TMS package </title> 

<section>
<title>Job submission </title>
<para>
To submit a job, via VISHNU, to the batch scheduler of a specific machine, the user needs: an active VISHNU session, 
a local user configuration registered on VISHNU that corresponds to an existing UNIX account on the specified machine, and a script that describes 
the job to submit. In the current implementation of VISHNU, it is possible to use the directives for several batch schedulers: TORQUE, LoadLeveler, SLURM, LSF,
Grid Engine and PBSPro.
In order to use the same script on different batch schedulers, a generic script with generic VISHNU directives is used.
The <emphasis role="bold">vishnu_submit_job</emphasis> command allows a user to submit a job in the shell terminal.
To obtain information on a job, the user can use the <emphasis role="bold">vishnu_get_job_info</emphasis> or 
<emphasis role="bold">vishnu_list_jobs</emphasis>, 
and for a job's progression status, <emphasis role="bold">the vishnu_get_job_progression</emphasis> command is used. The job's progression status is calculated according to the wall-clock time specified
by the user during the job's submission.
When TMS is running with a classic batch scheduler, it is possible to submit a job to TMS to get the script executed in the 
shell and not by the batch scheduler. By default the real underlying batch scheduler is used. To do so, one must use the 
<emphasis role="bold">-p</emphasis> option in command line
(posix parameter in objects). The user will see it like others jobs and can access the same information. Nevertheless, some
parameters are irrelevant in this case, for instance the CPU, the memory, the queue or the mail notification parameters
are ignored. The queue will always be the same. Moreover, on a machine without batch scheduler, the admin can deploy TMS and
only this 'pseudo batch' will be used.
</para>
<para>It is possible to have various values defining the same option of submission : in the option object, in the submission script and the default configuration value of the batch scheduler. The most prioritary one is the option object. Then the value in the script and lastly the default value defined by the batch scheduler. </para>

<section>
<title>VISHNU generic script </title>
<para>The key words of a VISHNU generic script start with the special character <emphasis role="bold">#%</emphasis>. For example, to specify 
a job's name, users have to use the following directive in their scripts: <emphasis role="bold">#% vishnu_job_name</emphasis>. 
The possible generic directives are:
</para>

<itemizedlist>
<listitem>
<para><emphasis role="bold">#% vishnu_group</emphasis>: allow to specify the group's name,</para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_working_dir</emphasis>: allow to specify a job remote working dir,</para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_job_name</emphasis>: allow to specify the job's name. Spaces are not accepted in job name,</para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_output</emphasis>: allow to specify the path of the job's ouput file,</para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_error</emphasis>: allow to specify the path of the file containing the problems that occured during the job's execution,</para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_wallclocklimit</emphasis>: allow to specify the estimated time for the job's execution,</para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_cput</emphasis>: allow to specify the job cpu limit time,</para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_nb_cpu</emphasis>: allow to specify the number of cpus per node of the job,</para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_nbNodesAndCpuPerNode</emphasis>: allow to specify the number of nodes and the cpu of each node. For exemple if you want to use 4 nodes and to use 3 cpus of each node, you must sepecify thes numbers by "4:3", </para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_memory</emphasis>: allow to specify the memory size that the job requires,</para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_mailNotification </emphasis>: allow to specify the notification type of the job. Valid type values are BEGIN, END, ERROR, 
and ALL (any state change), </para>
</listitem>
<!--listitem>
		  <para><emphasis role="bold">#% vishnu_notify_user</emphasis>: specifies the mail adress of the job's owner in order to receive a notification when the 
		    job is completed, 
		  </para>
		</listitem-->
<listitem>
<para><emphasis role="bold">#% vishnu_notify_user</emphasis>: The name of user to receive email notification of state changes as defined by the option mailNotification. The default value is the submitting user,
</para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_queue</emphasis>: specifies the queue where the job will be submitted. It is possible to obtain a list of 
the batch scheduler's queues by using the <emphasis role="bold">vishnu_list_queues</emphasis> command.
</para>
</listitem>
</itemizedlist>
<para>
It is important to note that the user can also add directives specific to a batch scheduler (TORQUE, LoadLeveler, SLURM, LSF or Grid Engine). Such specific directives must be added directly after the generic directives. Here is an example:
</para>
<programlisting>
#!/bin/sh
#% vishnu_job_name=first_job
#% vishnu_queue=first_queue
#% vishnu_output=/path/to/jobOutput
#% vishnu_error=/path/to/jobError
#% vishnu_wallclocklimit=2:40:5
#This line is a comment
#The following lines are TORQUE specific section
#PBS -l ncpus=1
#PBS -l mem=50
#The following lines are LOADLEVELER specific section
#@ notify_user=user@mail
#@ cpu_limit=2
#The following lines are SLURM specific section
#SBATCH -J myFristJob
#SBATCH -o myJob-%j.out
#SBATCH -e myJob-%j.err
#SBATCH -t 01:02:20
#SBATCH -p myFavoritePartition
#The following lines are LSF specific section
#BSUB -J myFristJob
#BSUB -o myJob-%J.out
#BSUB -e myJob-%J.err
#BSUB -W 01:02
#BSUB -q priority
#The following lines are Grid Engine specific section
#$ -N myFristJob
#$ -o myJob-$JOB_ID.out
#$ -e myJob-$JOB_ID.err 
#$ -l s_rt=01:02:20
#$ -q myFavoriteQueue
</programlisting>
</section> 
<section>
<title>Posix batch default configuration </title>
<itemizedlist>
<listitem>
<para><emphasis role="bold">#% vishnu_group</emphasis>: ignored, </para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_working_dir</emphasis>: user's home by default,</para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_job_name</emphasis>: posix_job,</para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_output</emphasis>: in the user's home in a file called VISHNU-XXXX-XXXX.out </para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_error</emphasis>: in the user's home in a file called VISHNU-XXXX-XXXX.err, </para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_wallclocklimit</emphasis>: infinite by default,</para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_cput</emphasis>: ignored,</para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_nb_cpu</emphasis>: ignored,</para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_nbNodesAndCpuPerNode</emphasis>: ignored,</para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_memory</emphasis>: ignored,</para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_mailNotification </emphasis>: ignored,</para>
</listitem>
<!--listitem>
		  <para><emphasis role="bold">#% vishnu_notify_user</emphasis>: specifies the mail adress of the job's owner in order to receive a notification when the 
		    job is completed, 
		  </para>
		</listitem-->
<listitem>
<para><emphasis role="bold">#% vishnu_notify_user</emphasis>: ignored, 
</para>
</listitem>
<listitem>
<para><emphasis role="bold">#% vishnu_queue</emphasis>: ignored.
</para>
</listitem>
</itemizedlist>

</section>

</section>

<section>
<title>Environment Variables</title>
<para>
The VISHNU Job Manager sets the following variables in the environment of the batch script.
</para>

<para>
<itemizedlist>
<listitem>
<para>
<emphasis role="bold">VISHNU_BATCHJOB_ID</emphasis>: Set the identifier assigned to the job by the batch system.
</para> 
</listitem> 

<listitem>
<para>
<emphasis role="bold">VISHNU_BATCHJOB_NAME</emphasis>: Set the name of the job.
</para>
</listitem>

<listitem>
<para>
<emphasis role="bold">VISHNU_SUBMIT_MACHINE_NAME</emphasis>: Set the name of the machine on which the job has been submitted.
</para>
</listitem>

<listitem>
<para>
<emphasis role="bold">VISHNU_BATCHJOB_NODEFILE</emphasis>: Set the name of the file contain the list of nodes assigned to the job.
</para>
</listitem>

<listitem>
<para>
<emphasis role="bold">VISHNU_BATCHJOB_NUM_NODES</emphasis>: Set the total number of nodes in the job's resource allocation.
</para>
</listitem>
<listitem>
<para>
<emphasis role="bold">VISHNU_OUTPUT_DIR</emphasis>: Defines a generic directory through with files generated by a script can be stored in order to be get out easilyvia the appropriate VISHNU commands (vishnu_get_output, vishnu_get_completed_jobs_output).
</para>
</listitem>	
</itemizedlist>
</para>
</section>

<section>
<title>Advanced Soumissions in Cloud Resources</title>
<para>
From the version 3.0.0, VISHNU supports submission of jobs that will run on virtual machines hosted on clouds or on virtual resource managers such as OpenStack and OpenNebula. 
Submissions on those kinds of resources on Deltacloud for a large interoperability. This extension is yet in beta test stage, and only submission on OpenStack 
resources has been tested at the moment. 
</para>
<para>
When submitting a job on those kinds of resources, there are some advanced parameters that the users can provide to influence the allocation of virtual resources 
to dedicate to the job. These parameters must be provided to VISHNU through the option <emphasis>-S</emphasis>, or the long one
<emphasis>--specificParams</emphasis>, from <emphasis>vishnu_submit_job</emphasis> command. 
There is a complete list of supported parameters, their identifiers are case sensitive:
<itemizedlist>
<listitem>
<para>
user: sets the user account to log on the cloud backend. 
</para>
</listitem>
<listitem>
<para>
user-password: sets the password associated to the user account.
</para>
</listitem>
<listitem>
<para>
vm-image: sets the identifier of the virtual machine image to instanciate.
</para>
</listitem>
<listitem>
<para>
vm-user: sets the identifier of the user under which the job should be executed within the virtual machines.
</para>
</listitem>
<listitem>
<para>
vm-key: sets the SSH key to deploy on the virtual machines, under the related 'vm-user' account.
</para>
</listitem>
<listitem>
<para>
vm-flavor: sets the flavor of virtual machines.
</para>
</listitem>
</itemizedlist>
</para>
</section>
<section>
<title>Job Cancellation </title>
<para>To cancel a job, the <emphasis role="bold">vishnu_cancel_job</emphasis> command is used with the VISHNU identifer 
of the job to cancel. When the identifer of the job is <emphasis role="italic">all</emphasis>, all of the user's jobs are cancelled. 
An admin can also cancel all the jobs of all the users of VISHNU.
</para>
</section> 

<section>
<title>Job output files </title>
<para>VISHNU offers two commands, to be used in a shell terminal, to get the result output files for a job: 
<itemizedlist>

<listitem>
<para><emphasis role="bold">vishnu_get_job_output</emphasis> or,</para>
</listitem>

<listitem>
<para><emphasis role="bold">vishnu_get_completed_jobs_output</emphasis> </para>
</listitem>
</itemizedlist> 
The former gives the output files for a specific job while the latter gives the output files for all the completed jobs.
It is important to note that all submitted jobs have two output files: one with the job's results, one (possibly empty) with the errors that occurred during the job's execution. The path of the job's output files is specified during the job's submission.
</para>
</section> 

<section>
<title>Configuration of ssh keys required for TMS</title>
<para>
Submission, cancellation and getting of job output files are executed by TMS SeD launched via ssh under the account of user having issued the request. To execute these services correctly, the public ssh key of the account dedicated to TMS SeD must be added to authorized_keys ($HOME/.ssh/authorized_keys) file of the user. All keys protected by passphrase must be stored by a ssh agent to allow automatic authentication.
</para>
</section>

</section>

<section><!-- FMS description-->
<title>FMS package </title>
<section>
<title>Create and remove file or directories</title>
<para>
The user can create (or remove) a regular file located in a remote host by using the command <emphasis role="bold">vishnu_touch</emphasis> ( or <emphasis role="bold">vishnu_rm</emphasis>). He can also create (or remove) directory located in a remote host by using the command <emphasis role="bold">vishnu_mkdir</emphasis> ( or <emphasis role="bold">vishnu_rmdir</emphasis>).
</para>
</section>
<section>
<title>Get file information</title>
<para>Several services are available to get file information. The user can get the first ( or last lines) of a given remote file by using the command <emphasis role="bold">vishnu_head</emphasis> ( or <emphasis role="bold">vishnu_tail</emphasis>). He can also get the entire content of a remote file (or remote directory) with the command <emphasis role="bold">vishnu_more</emphasis> (or <emphasis role="bold">vishnu_ls</emphasis>).</para> 
</section>
<section>
<title>Modify files properties </title>
<para>The commands <emphasis role="bold">vishnu_chgrp</emphasis> and
<emphasis role="bold">vishnu_chmod</emphasis> allow the user to change respectively the group and the access permissions of remote file.</para>
</section>
<section>
<title>Perform file transfer </title>
<para>The user can submit a file transfer in many ways:
<itemizedlist>
<listitem><para>copy (or move) file between two hosts by the commands <emphasis role="bold">vishnu_cp</emphasis> (or <emphasis role="bold">vishnu_mv</emphasis>). To use the copy/move commands from a client out of the DNS, one must use 'localhost' as a machine id for the local machine. </para>
</listitem>
<listitem><para>copy (or move) file between two hosts in asynchronous way by the commands <emphasis role="bold">vishnu_acp</emphasis> (or <emphasis role="bold">vishnu_amv</emphasis>) </para> </listitem>
<listitem><para>list or (cancel) file transfers by the commands <emphasis role="bold">vishnu_list_file_transfers</emphasis> (<emphasis role="bold">vishnu_stop_file_transfers</emphasis>) </para>
</listitem>
</itemizedlist>
</para>
</section>
</section>

<section>
<title>Troubleshooting functions </title>

<itemizedlist>
<listitem>
<para>The <emphasis role="italic">"There is no session in this terminal"</emphasis> error can be solved by connecting to VISHNU using 
the <emphasis role="bold">vishnu_connect</emphasis> command.
</para>
</listitem>

<listitem>
<para>If a message similar to <emphasis role="italic">"warning input stream error"</emphasis> happens when calling vishnu_connect but the call is successful, try cleaning the .vishnu directory.
</para>
</listitem>

<listitem>
<para>
If the message <emphasis role="italic">"locale::facet::_S_create_c_locale name not valid"</emphasis> occurs after calling vishnu_connect command, you must export environment variable LANG 
as follows : export LANG=C.
</para> 
</listitem>

<listitem>
<para>
If the message <emphasis role="italic">"The batch scheduler indicates an error [SGE ERROR: warning: username your job is not allowed to run in any queue]"</emphasis> is returned after
job submission on the batch scheduler SGE, the admin has to check the existence of a queue by using the command: <emphasis role="bold">qconf -sql</emphasis>. If there is no queue, you must add one by using the command <emphasis role="bold">qconf -aq </emphasis>.
</para> 
</listitem>

</itemizedlist>
</section>
<section>
<title>FAQ </title>

<itemizedlist>
<listitem>
<para>If the JAVA API (using the WS or the JAVA jars directly) fails, with an error such as undefined reference in a JNI
call, please add the flags <emphasis role="italic">-Wl,--add-stdcall-alias</emphasis> at the compilation of the VISHNU
target in the swigAPI/CMakeLists.txt.
</para>
</listitem>

</itemizedlist>
</section>
</section>
</chapter> <!-- PART 1 : VISHNU Presentation -->
</book>
