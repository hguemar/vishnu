/**
 * \file SessionProxy.cpp
 * \brief This file contains the VISHNU SessionProxy class.
 * \author Daouda Traore (daouda.traore@sysfera.com)
 * \date February 2011
 */
#include "SessionProxy.hpp"

#include <string>
#include <iostream>
#include <fstream>
#include <unistd.h>

#include "DIET_client.h"                // for diet_string_set, etc
#include "User.hpp"                     // for User
#include "UserException.hpp"            // for ERRCODE_INVALID_PARAM
#include "Version.hpp"                  // for Version
#include "UMS_Data.hpp"
#include "ecore_forward.hpp"            // for EString
#include "ecorecpp/serializer/serializer.hpp"  // for serializer
#include "utilClient.hpp"               // for raiseCommunicationMsgException, etc
#include "UserProxy.hpp"
#include "UMSVishnuException.hpp"
#include "vishnu_version.hpp"
#include "utilVishnu.hpp"
#include "UMSServices.hpp"

/**
 * \brief Constructor, raises an exception on error
 * \param sessionKey The encrypted identifier of the session generated by VISHNU
 */
SessionProxy::SessionProxy(const std::string& sessionKey):msessionKey(sessionKey)
{
}

/**
 * \brief Constructor, raises an exception on error
 * \param session The object which encapsulates the session information (ex: identifier of the session)
 */
SessionProxy::SessionProxy(const UMS_Data::Session& session):msession(session)
{
}

/**
 * \brief Constructor, raises an exception on error
 */
SessionProxy::SessionProxy()
{
}

/**
 * \brief Function to combine connect() and reconnect() into one function
 * \param user The object which encapsulates the user information (ex: userId and password)
 * \param connect to select the call of connect or reconnect function
 * \param options the object which encapsulate the options available for the connect method. It allows the user
 *  to choose the way for way for closing the session automatically on TIMEOUT or on DISCONNECT and the
 *  possibility for an admin to open a session as she was a specific user
 * \return raises an exception on error
 */
int
SessionProxy::_connect(const UserProxy& user, bool connect,
                       const UMS_Data::ConnectOptions& options) {

  char hostname[HOST_NAME_MAX_SIZE];
  std::string optionsToString;
  std::string versionToString;
  std::string sessionSerialiazed;
  size_t length;
  char* key;
  char* encryptedKey;
  //To set the possibles paths of the ssh key
  std::string sshKey1 = "/etc/ssh/ssh_host_dsa_key.pub";
  std::string sshKey2 = "/etc/ssh/ssh_host_rsa_key.pub";
  std::string sshKey3 = std::string(getenv("HOME"))+"/.vishnu/ssh_host_dsa_key.pub";
  std::string sshKey4 = std::string(getenv("HOME"))+"/.vishnu/ssh_host_rsa_key.pub";
  gethostname(hostname, HOST_NAME_MAX_SIZE);

  std::ifstream ifile;
  std::ifstream ifile1(sshKey1.c_str());
  std::ifstream ifile2(sshKey2.c_str());
  std::ifstream ifile3(sshKey3.c_str());
  std::ifstream ifile4(sshKey4.c_str());

  bool checkFile1 = ifile1.is_open();
  bool checkFile2 = ifile2.is_open();
  bool checkFile3 = ifile3.is_open();
  bool checkFile4 = ifile4.is_open();
  //To check if at least on file can be oponed
  if(!checkFile1 && !checkFile2 && !checkFile3 && !checkFile4) {
    throw UMSVishnuException(ERRCODE_INVALID_PARAM, "can't open file "+sshKey1+" or "+sshKey2+" or "+sshKey3+":\n"+
                             "You must copy the file of your sshKey in one of three free files:\n"
                             +"/etc/ssh/ssh_host_dsa_key.pub, or\n"
                             +"/etc/ssh/ssh_host_rsa_key.pub, or\n"
                             +"$HOME/.vishnu/ssh_host_dsa_key.pub, or\n"
                             +"$HOME/.vishnu/ssh_host_rsa_key.pub");
  }

  //To get the content of the first opened file and close the others files opened
  if(checkFile1) {
    ifile1.close();
    ifile.open(sshKey1.c_str());
    if(checkFile2) {
      ifile2.close();
    }
    if(checkFile3) {
      ifile3.close();
    }
    if(checkFile4) {
      ifile4.close();
    }
  } else if(checkFile2) {
    ifile2.close();
    ifile.open(sshKey2.c_str());
    if(checkFile3) {
      ifile3.close();
    }
    if(checkFile4) {
      ifile4.close();
    }
  } else if(checkFile3) {
    ifile3.close();
    ifile.open(sshKey3.c_str());
    if(checkFile4) {
      ifile4.close();
    }
  } else {
    ifile4.close();
    ifile.open(sshKey4.c_str());
  }

  ifile.seekg(0, std::ios::end);
  length = ifile.tellg();
  ifile.seekg(0, std::ios::beg);

  key = new char[length];
  ifile.read(key, length);
  ifile.close();

  std::string salt = "$6$"+user.getData().getUserId()+"$";
  encryptedKey = crypt(key, salt.c_str());

  UMS_Data::Version_ptr vers = vishnu::parseVersion(VISHNU_VERSION);
  if (vers == NULL) {
    throw UMSVishnuException(ERRCODE_INVALID_PARAM, "The format of the VISHNU VERSION is incorrect");
  } else {
    //serialize the version object in to versionToString
    ::ecorecpp::serializer::serializer _serializeVersion;
    versionToString =  _serializeVersion.serialize_str(vers);
  }

  diet_profile_t* profile = NULL;
  if(connect) {
    // SERIALIZE DATA MODEL
    ::ecorecpp::serializer::serializer _ser;
    //To serialize the options object in to optionsToString
    optionsToString =  _ser.serialize_str(const_cast<UMS_Data::ConnectOptions_ptr>(&options));
    profile = diet_profile_alloc(SERVICES_UMS[SESSIONCONNECT], 6);
  } else {
    profile = diet_profile_alloc(SERVICES_UMS[SESSIONRECONNECT], 6);
  }

  //IN Parameters
  diet_string_set(profile,0, user.getData().getUserId());
  diet_string_set(profile,1, user.getData().getPassword());
  diet_string_set(profile,2, encryptedKey+salt.length());
  diet_string_set(profile,3, hostname);
  if (connect) {
    diet_string_set(profile,4, optionsToString);
  } else {
    diet_string_set(profile,4, msession.getSessionId());
  }
  diet_string_set(profile,5, versionToString);

  if (diet_call(profile)) {
    raiseCommunicationMsgException("RPC call failed");
  }
  raiseExceptionOnErrorResult(profile);

  diet_string_get(profile,1, sessionSerialiazed);

  //To parse Session object serialized
  UMS_Data::Session_ptr session_ptr;
  parseEmfObject(sessionSerialiazed, session_ptr, "Error by receiving Session object serialized");
  msession = *session_ptr;
  delete session_ptr;

  if (key != NULL) {
    delete [] key;
  }

  if (vers != NULL) {
    delete vers;
  }

  return 0;
}

/**
 * \brief Function to open a session
 * \param user The object which encapsulates the user information (ex: userId and password)
 * \param options the object which encapsulate the options available for the connect method. It allows the user
 *  to choose the way for way for closing the session automatically on TIMEOUT or on DISCONNECT and the
 *  possibility for an admin to open a session as she was a specific user
 * \return raises an exception on error
 */
int
SessionProxy::connect(const UserProxy& user,
                      const UMS_Data::ConnectOptions& options) {
  return _connect(user, true, options);
}

/**
 * \brief Function to reconnect to an opened session
 * \param user The object which encapsulates the user information (ex: userId and password)
 * \return raises an exception on error
 */
int
SessionProxy::reconnect(const UserProxy& user) {
  return _connect(user);
}

/**
 * \brief Function close an opened session
 * \return raises an exception on error
 */
int
SessionProxy::close() {

  std::string sessionKey =  msessionKey;

  diet_profile_t* profile = diet_profile_alloc(SERVICES_UMS[SESSIONCLOSE], 1);
  //IN Parameters
  if (diet_string_set(profile, 0, sessionKey)) {
    raiseCommunicationMsgException("Failed setting session parameter in profile");
  }

  if (diet_call(profile)) {
    raiseCommunicationMsgException("RPC call failed");
  }
  raiseExceptionOnErrorResult(profile);

  diet_profile_free(profile);
  return 0;
}

/**
 * \brief Function get the encrypted identifier of the session generated by VISHNU
 * \return the encrypted identifier of the session generated by VISHNU
 * \return raises an exception on error
 */
std::string
SessionProxy::getSessionKey() const {
  return msessionKey;
}

/**
 * \brief Function get machine information
 * \return Session object encapsulates the information of the session
 * \return raises an exception on error
 */
UMS_Data::Session
SessionProxy::getData() const {
  return msession;
}

/**
 * \brief Destructor, raises an exception on error
 */
SessionProxy::~SessionProxy() {
}
