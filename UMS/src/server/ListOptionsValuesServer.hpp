/**
 * \file ListOptionsValuesServer.hpp
 * \brief This file contains the VISHNU QueryServer class.
 * \author Daouda Traore (daouda.traore@sysfera.com) and
 *   Eug√®ne PAMBA CAPO-CHICHI (eugene.capochichi@sysfera.com)
 * \date February 2011
 */
#ifndef _LIST_OPTIONS_VALUES_SERVER_
#define _LIST_OPTIONS_VALUES_SERVER_

#include <string>
#include <vector>
#include <list>
#include <iostream>
#include "boost/date_time/posix_time/posix_time.hpp"

#include "SessionServer.hpp"
#include "ListOptionsValues.hpp"
#include "ListOptOptions.hpp"

/**
 * \class ListOptionsValuesServer
 * \brief ListOptionsValuesServer class implementation
 */
class ListOptionsValuesServer: public QueryServer<UMS_Data::ListOptOptions, UMS_Data::ListOptionsValues>
{

public:

  /**
   * \brief Constructor, raises an exception on error
   * \param session The object which encapsulates the session information (ex: identifier of the session)
   */
  ListOptionsValuesServer(const SessionServer session)
    : QueryServer<UMS_Data::ListOptOptions, UMS_Data::ListOptionsValues>(),
      mcommandName("vishnu_list_options"),
      msessionServer(session)
  {
  }


  /**
   * \brief Function to treat the ListOptionsValuesServer options
   * \param userServer the object which encapsulates user information
   * \param options the object which contains the ListOptionsValuesServer options values
   * \param sqlRequest the sql data base request
   * \return raises an exception on error
   */
  void
  processOptions(UserServer userServer, const UMS_Data::ListOptOptions_ptr& options, std::string& sqlRequest)
  {
    std::string sqlListofOptionValues = "SELECT description, value, userid from optionu, optionvalue, users"
                                        " where optionu.numoptionid=optionvalue.optionu_numoptionid and"
                                        " optionvalue.users_numuserid=users.numuserid";

    size_t userIdSize = options->getUserId().size();
    size_t nameSize = options->getOptionName().size();
    bool listAllDefault = options->isListAllDeftValue();

    if ((!userServer.isAdmin()) && (userIdSize!=0)) {
      UMSVishnuException e (ERRCODE_NO_ADMIN);
      throw e;
    }

    if(!listAllDefault) {

      if(userIdSize==0) {
        sqlRequest = sqlListofOptionValues;
        addOptionRequest("userid", userServer.getData().getUserId(), sqlRequest);
      } else {
        //To check if the user id is correct
        checkUserId(options->getUserId());

        sqlRequest = sqlListofOptionValues;
        addOptionRequest("userid", options->getUserId(), sqlRequest);
      }

      if(nameSize!=0) {
        //To check if the option name is correct
        checkOptionName(options->getOptionName());

        addOptionRequest("description", options->getOptionName(), sqlRequest);
      }
    }

  }

  /**
   * \brief Function to list options values information
   * \return The pointer to the UMS_Data::ListOptionsValues containing options values information
   * \return raises an exception on error
   */
  UMS_Data::ListOptionsValues*
  list(UMS_Data::ListOptOptions_ptr option) {
    std::string sqlListofOptions = "SELECT description, defaultvalue from optionu";

    std::vector<std::string>::iterator ii;
    std::vector<std::string> results;
    UMS_Data::UMS_DataFactory_ptr ecoreFactory = UMS_Data::UMS_DataFactory::_instance();
    mlistObject = ecoreFactory->createListOptionsValues();


    //Creation of the object user
    UserServer userServer = UserServer(msessionServer);
    userServer.init();
    //if the user exists
    if (userServer.exist()) {
      //To process options
      processOptions(userServer, option, sqlListofOptions);

      //To get the list of options values from the database
      boost::scoped_ptr<DatabaseResult> ListofOptions (mdatabaseInstance->getResult(sqlListofOptions.c_str()));

      if (ListofOptions->getNbTuples() != 0){
        for (size_t i = 0; i < ListofOptions->getNbTuples(); ++i) {
          results.clear();
          results = ListofOptions->get(i);
          ii = results.begin();

          UMS_Data::OptionValue_ptr optionValue = ecoreFactory->createOptionValue();;
          optionValue->setOptionName(*ii);
          optionValue->setValue(*(++ii));
          mlistObject->getOptionValues().push_back(optionValue);
        }
      }
    }
    else {
      UMSVishnuException e (ERRCODE_UNKNOWN_USER);
      throw e;
    }
    return mlistObject;
  }

  /**
    * \brief Function to get the name of the ListOptionsValuesServer command line
    * \return The the name of the ListOptionsValuesServer command line
    */
  std::string
  getCommandName()
  {
    return mcommandName;
  }

  /**
   * \brief Destructor, raises an exception on error
   */
  ~ListOptionsValuesServer()
  {
  }

private:

  /**
  * \brief The name of the ListOptionsValuesServer command line
  */
  std::string mcommandName;

  /**
  * \brief The SessionServer object containing the encrypted identifier of the session
  *  generated by VISHNU
  */
  SessionServer msessionServer;
};

#endif
