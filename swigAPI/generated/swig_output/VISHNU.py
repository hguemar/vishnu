# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VISHNU', [dirname(__file__)])
        except ImportError:
            import _VISHNU
            return _VISHNU
        if fp is not None:
            try:
                _mod = imp.load_module('_VISHNU', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _VISHNU = swig_import_helper()
    del swig_import_helper
else:
    import _VISHNU
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VISHNU.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self, *args, **kwargs):
        """value(SwigPyIterator self) -> PyObject *"""
        return _VISHNU.SwigPyIterator_value(self, *args, **kwargs)

    def incr(self, *args, **kwargs):
        """incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _VISHNU.SwigPyIterator_incr(self, *args, **kwargs)

    def decr(self, *args, **kwargs):
        """decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _VISHNU.SwigPyIterator_decr(self, *args, **kwargs)

    def distance(self, *args, **kwargs):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _VISHNU.SwigPyIterator_distance(self, *args, **kwargs)

    def equal(self, *args, **kwargs):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _VISHNU.SwigPyIterator_equal(self, *args, **kwargs)

    def copy(self, *args, **kwargs):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _VISHNU.SwigPyIterator_copy(self, *args, **kwargs)

    def next(self, *args, **kwargs):
        """next(SwigPyIterator self) -> PyObject *"""
        return _VISHNU.SwigPyIterator_next(self, *args, **kwargs)

    def __next__(self, *args, **kwargs):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _VISHNU.SwigPyIterator___next__(self, *args, **kwargs)

    def previous(self, *args, **kwargs):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _VISHNU.SwigPyIterator_previous(self, *args, **kwargs)

    def advance(self, *args, **kwargs):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _VISHNU.SwigPyIterator_advance(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _VISHNU.SwigPyIterator___eq__(self, *args, **kwargs)

    def __ne__(self, *args, **kwargs):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _VISHNU.SwigPyIterator___ne__(self, *args, **kwargs)

    def __iadd__(self, *args, **kwargs):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _VISHNU.SwigPyIterator___iadd__(self, *args, **kwargs)

    def __isub__(self, *args, **kwargs):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _VISHNU.SwigPyIterator___isub__(self, *args, **kwargs)

    def __add__(self, *args, **kwargs):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _VISHNU.SwigPyIterator___add__(self, *args, **kwargs)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _VISHNU.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _VISHNU.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class EObject(_object):
    """Proxy of C++ ecore::EObject class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(ecore::EObject self) -> EObject"""
        this = _VISHNU.new_EObject(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_EObject
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(EObject self)"""
        return _VISHNU.EObject__initialize(self, *args, **kwargs)

    def eClass(self, *args, **kwargs):
        """eClass(EObject self) -> ::ecore::EClass_ptr"""
        return _VISHNU.EObject_eClass(self, *args, **kwargs)

    def eIsProxy(self, *args, **kwargs):
        """eIsProxy(EObject self) -> ::ecore::EBoolean"""
        return _VISHNU.EObject_eIsProxy(self, *args, **kwargs)

    def eResource(self, *args, **kwargs):
        """eResource(EObject self) -> ::ecore::EResource"""
        return _VISHNU.EObject_eResource(self, *args, **kwargs)

    def eContainer(self, *args, **kwargs):
        """eContainer(EObject self) -> EObject"""
        return _VISHNU.EObject_eContainer(self, *args, **kwargs)

    def eContainingFeature(self, *args, **kwargs):
        """eContainingFeature(EObject self) -> ::ecore::EStructuralFeature_ptr"""
        return _VISHNU.EObject_eContainingFeature(self, *args, **kwargs)

    def eContainmentFeature(self, *args, **kwargs):
        """eContainmentFeature(EObject self) -> ::ecore::EReference_ptr"""
        return _VISHNU.EObject_eContainmentFeature(self, *args, **kwargs)

    def eContents(self, *args, **kwargs):
        """eContents(EObject self) -> std::list< ::ecore::EObject_ptr >"""
        return _VISHNU.EObject_eContents(self, *args, **kwargs)

    def eAllContents(self, *args, **kwargs):
        """eAllContents(EObject self) -> int"""
        return _VISHNU.EObject_eAllContents(self, *args, **kwargs)

    def eCrossReferences(self, *args, **kwargs):
        """eCrossReferences(EObject self) -> std::list< ::ecore::EObject_ptr >"""
        return _VISHNU.EObject_eCrossReferences(self, *args, **kwargs)

    def eInvoke(self, *args, **kwargs):
        """eInvoke(EObject self, ::ecore::EOperation_ptr _operation, std::list< ::ecorecpp::mapping::any > const & _arguments) -> ::ecore::EJavaObject"""
        return _VISHNU.EObject_eInvoke(self, *args, **kwargs)

    def eGet(self, *args):
        """
        eGet(EObject self, ::ecore::EStructuralFeature_ptr _feature) -> ::ecore::EJavaObject
        eGet(EObject self, ::ecore::EStructuralFeature_ptr _feature, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject
        eGet(EObject self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject
        """
        return _VISHNU.EObject_eGet(self, *args)

    def eSet(self, *args):
        """
        eSet(EObject self, ::ecore::EStructuralFeature_ptr _feature, ::ecore::EJavaObject const & _newValue)
        eSet(EObject self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)
        """
        return _VISHNU.EObject_eSet(self, *args)

    def eIsSet(self, *args):
        """
        eIsSet(EObject self, ::ecore::EStructuralFeature_ptr _feature) -> ::ecore::EBoolean
        eIsSet(EObject self, ::ecore::EInt _featureID) -> ::ecore::EBoolean
        """
        return _VISHNU.EObject_eIsSet(self, *args)

    def eUnset(self, *args):
        """
        eUnset(EObject self, ::ecore::EStructuralFeature_ptr _feature)
        eUnset(EObject self, ::ecore::EInt _featureID)
        """
        return _VISHNU.EObject_eUnset(self, *args)

    def _eClass(self, *args, **kwargs):
        """_eClass(EObject self) -> ::ecore::EClass_ptr"""
        return _VISHNU.EObject__eClass(self, *args, **kwargs)

    def _setEContainer(self, *args, **kwargs):
        """_setEContainer(EObject self, EObject _eContainer, ::ecore::EStructuralFeature_ptr _eContainingFeature)"""
        return _VISHNU.EObject__setEContainer(self, *args, **kwargs)

EObject_swigregister = _VISHNU.EObject_swigregister
EObject_swigregister(EObject)

class ConnectOptions(EObject):
    """Proxy of C++ UMS_Data::ConnectOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConnectOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(UMS_Data::ConnectOptions self) -> ConnectOptions"""
        this = _VISHNU.new_ConnectOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ConnectOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(ConnectOptions self)"""
        return _VISHNU.ConnectOptions__initialize(self, *args, **kwargs)

    def getClosePolicy(self, *args, **kwargs):
        """getClosePolicy(ConnectOptions self) -> ::UMS_Data::SessionCloseType"""
        return _VISHNU.ConnectOptions_getClosePolicy(self, *args, **kwargs)

    def setClosePolicy(self, *args, **kwargs):
        """setClosePolicy(ConnectOptions self, ::UMS_Data::SessionCloseType _closePolicy)"""
        return _VISHNU.ConnectOptions_setClosePolicy(self, *args, **kwargs)

    def getSessionInactivityDelay(self, *args, **kwargs):
        """getSessionInactivityDelay(ConnectOptions self) -> ::ecore::EInt"""
        return _VISHNU.ConnectOptions_getSessionInactivityDelay(self, *args, **kwargs)

    def setSessionInactivityDelay(self, *args, **kwargs):
        """setSessionInactivityDelay(ConnectOptions self, ::ecore::EInt _sessionInactivityDelay)"""
        return _VISHNU.ConnectOptions_setSessionInactivityDelay(self, *args, **kwargs)

    def getSubstituteUserId(self, *args, **kwargs):
        """getSubstituteUserId(ConnectOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ConnectOptions_getSubstituteUserId(self, *args, **kwargs)

    def setSubstituteUserId(self, *args, **kwargs):
        """setSubstituteUserId(ConnectOptions self, ::ecore::EString const & _substituteUserId)"""
        return _VISHNU.ConnectOptions_setSubstituteUserId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(ConnectOptions self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.ConnectOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(ConnectOptions self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.ConnectOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(ConnectOptions self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.ConnectOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(ConnectOptions self, ::ecore::EInt _featureID)"""
        return _VISHNU.ConnectOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(ConnectOptions self) -> ::ecore::EClass_ptr"""
        return _VISHNU.ConnectOptions__eClass(self, *args, **kwargs)

ConnectOptions_swigregister = _VISHNU.ConnectOptions_swigregister
ConnectOptions_swigregister(ConnectOptions)

class Session(EObject):
    """Proxy of C++ UMS_Data::Session class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Session, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Session, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(UMS_Data::Session self) -> Session"""
        this = _VISHNU.new_Session(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_Session
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(Session self)"""
        return _VISHNU.Session__initialize(self, *args, **kwargs)

    def getSessionId(self, *args, **kwargs):
        """getSessionId(Session self) -> ::ecore::EString const &"""
        return _VISHNU.Session_getSessionId(self, *args, **kwargs)

    def setSessionId(self, *args, **kwargs):
        """setSessionId(Session self, ::ecore::EString const & _sessionId)"""
        return _VISHNU.Session_setSessionId(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(Session self) -> ::ecore::EString const &"""
        return _VISHNU.Session_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(Session self, ::ecore::EString const & _userId)"""
        return _VISHNU.Session_setUserId(self, *args, **kwargs)

    def getSessionKey(self, *args, **kwargs):
        """getSessionKey(Session self) -> ::ecore::EString const &"""
        return _VISHNU.Session_getSessionKey(self, *args, **kwargs)

    def setSessionKey(self, *args, **kwargs):
        """setSessionKey(Session self, ::ecore::EString const & _sessionKey)"""
        return _VISHNU.Session_setSessionKey(self, *args, **kwargs)

    def getDateLastConnect(self, *args, **kwargs):
        """getDateLastConnect(Session self) -> ::ecore::ELong"""
        return _VISHNU.Session_getDateLastConnect(self, *args, **kwargs)

    def setDateLastConnect(self, *args, **kwargs):
        """setDateLastConnect(Session self, ::ecore::ELong _dateLastConnect)"""
        return _VISHNU.Session_setDateLastConnect(self, *args, **kwargs)

    def getDateCreation(self, *args, **kwargs):
        """getDateCreation(Session self) -> ::ecore::ELong"""
        return _VISHNU.Session_getDateCreation(self, *args, **kwargs)

    def setDateCreation(self, *args, **kwargs):
        """setDateCreation(Session self, ::ecore::ELong _dateCreation)"""
        return _VISHNU.Session_setDateCreation(self, *args, **kwargs)

    def getDateClosure(self, *args, **kwargs):
        """getDateClosure(Session self) -> ::ecore::ELong"""
        return _VISHNU.Session_getDateClosure(self, *args, **kwargs)

    def setDateClosure(self, *args, **kwargs):
        """setDateClosure(Session self, ::ecore::ELong _dateClosure)"""
        return _VISHNU.Session_setDateClosure(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(Session self) -> ::UMS_Data::StatusType"""
        return _VISHNU.Session_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(Session self, ::UMS_Data::StatusType _status)"""
        return _VISHNU.Session_setStatus(self, *args, **kwargs)

    def getClosePolicy(self, *args, **kwargs):
        """getClosePolicy(Session self) -> ::UMS_Data::SessionCloseType"""
        return _VISHNU.Session_getClosePolicy(self, *args, **kwargs)

    def setClosePolicy(self, *args, **kwargs):
        """setClosePolicy(Session self, ::UMS_Data::SessionCloseType _closePolicy)"""
        return _VISHNU.Session_setClosePolicy(self, *args, **kwargs)

    def getTimeout(self, *args, **kwargs):
        """getTimeout(Session self) -> ::ecore::ELong"""
        return _VISHNU.Session_getTimeout(self, *args, **kwargs)

    def setTimeout(self, *args, **kwargs):
        """setTimeout(Session self, ::ecore::ELong _timeout)"""
        return _VISHNU.Session_setTimeout(self, *args, **kwargs)

    def getAuthenId(self, *args, **kwargs):
        """getAuthenId(Session self) -> ::ecore::EString const &"""
        return _VISHNU.Session_getAuthenId(self, *args, **kwargs)

    def setAuthenId(self, *args, **kwargs):
        """setAuthenId(Session self, ::ecore::EString const & _authenId)"""
        return _VISHNU.Session_setAuthenId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(Session self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.Session_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(Session self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.Session_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(Session self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.Session_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(Session self, ::ecore::EInt _featureID)"""
        return _VISHNU.Session_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(Session self) -> ::ecore::EClass_ptr"""
        return _VISHNU.Session__eClass(self, *args, **kwargs)

Session_swigregister = _VISHNU.Session_swigregister
Session_swigregister(Session)

class ListUsersOptions(EObject):
    """Proxy of C++ UMS_Data::ListUsersOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListUsersOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListUsersOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(UMS_Data::ListUsersOptions self) -> ListUsersOptions"""
        this = _VISHNU.new_ListUsersOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ListUsersOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(ListUsersOptions self)"""
        return _VISHNU.ListUsersOptions__initialize(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(ListUsersOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListUsersOptions_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(ListUsersOptions self, ::ecore::EString const & _userId)"""
        return _VISHNU.ListUsersOptions_setUserId(self, *args, **kwargs)

    def getAuthSystemId(self, *args, **kwargs):
        """getAuthSystemId(ListUsersOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListUsersOptions_getAuthSystemId(self, *args, **kwargs)

    def setAuthSystemId(self, *args, **kwargs):
        """setAuthSystemId(ListUsersOptions self, ::ecore::EString const & _authSystemId)"""
        return _VISHNU.ListUsersOptions_setAuthSystemId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(ListUsersOptions self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.ListUsersOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(ListUsersOptions self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.ListUsersOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(ListUsersOptions self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.ListUsersOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(ListUsersOptions self, ::ecore::EInt _featureID)"""
        return _VISHNU.ListUsersOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(ListUsersOptions self) -> ::ecore::EClass_ptr"""
        return _VISHNU.ListUsersOptions__eClass(self, *args, **kwargs)

ListUsersOptions_swigregister = _VISHNU.ListUsersOptions_swigregister
ListUsersOptions_swigregister(ListUsersOptions)

class ListSessionOptions(EObject):
    """Proxy of C++ UMS_Data::ListSessionOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListSessionOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListSessionOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(UMS_Data::ListSessionOptions self) -> ListSessionOptions"""
        this = _VISHNU.new_ListSessionOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ListSessionOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(ListSessionOptions self)"""
        return _VISHNU.ListSessionOptions__initialize(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(ListSessionOptions self) -> ::UMS_Data::StatusType"""
        return _VISHNU.ListSessionOptions_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(ListSessionOptions self, ::UMS_Data::StatusType _status)"""
        return _VISHNU.ListSessionOptions_setStatus(self, *args, **kwargs)

    def getSessionClosePolicy(self, *args, **kwargs):
        """getSessionClosePolicy(ListSessionOptions self) -> ::UMS_Data::SessionCloseType"""
        return _VISHNU.ListSessionOptions_getSessionClosePolicy(self, *args, **kwargs)

    def setSessionClosePolicy(self, *args, **kwargs):
        """setSessionClosePolicy(ListSessionOptions self, ::UMS_Data::SessionCloseType _sessionClosePolicy)"""
        return _VISHNU.ListSessionOptions_setSessionClosePolicy(self, *args, **kwargs)

    def getSessionInactivityDelay(self, *args, **kwargs):
        """getSessionInactivityDelay(ListSessionOptions self) -> ::ecore::EInt"""
        return _VISHNU.ListSessionOptions_getSessionInactivityDelay(self, *args, **kwargs)

    def setSessionInactivityDelay(self, *args, **kwargs):
        """setSessionInactivityDelay(ListSessionOptions self, ::ecore::EInt _sessionInactivityDelay)"""
        return _VISHNU.ListSessionOptions_setSessionInactivityDelay(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(ListSessionOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListSessionOptions_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(ListSessionOptions self, ::ecore::EString const & _machineId)"""
        return _VISHNU.ListSessionOptions_setMachineId(self, *args, **kwargs)

    def isAdminListOption(self, *args, **kwargs):
        """isAdminListOption(ListSessionOptions self) -> ::ecore::EBoolean"""
        return _VISHNU.ListSessionOptions_isAdminListOption(self, *args, **kwargs)

    def setAdminListOption(self, *args, **kwargs):
        """setAdminListOption(ListSessionOptions self, ::ecore::EBoolean _adminListOption)"""
        return _VISHNU.ListSessionOptions_setAdminListOption(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(ListSessionOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListSessionOptions_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(ListSessionOptions self, ::ecore::EString const & _userId)"""
        return _VISHNU.ListSessionOptions_setUserId(self, *args, **kwargs)

    def getSessionId(self, *args, **kwargs):
        """getSessionId(ListSessionOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListSessionOptions_getSessionId(self, *args, **kwargs)

    def setSessionId(self, *args, **kwargs):
        """setSessionId(ListSessionOptions self, ::ecore::EString const & _sessionId)"""
        return _VISHNU.ListSessionOptions_setSessionId(self, *args, **kwargs)

    def getStartDateOption(self, *args, **kwargs):
        """getStartDateOption(ListSessionOptions self) -> ::ecore::ELong"""
        return _VISHNU.ListSessionOptions_getStartDateOption(self, *args, **kwargs)

    def setStartDateOption(self, *args, **kwargs):
        """setStartDateOption(ListSessionOptions self, ::ecore::ELong _startDateOption)"""
        return _VISHNU.ListSessionOptions_setStartDateOption(self, *args, **kwargs)

    def getEndDateOption(self, *args, **kwargs):
        """getEndDateOption(ListSessionOptions self) -> ::ecore::ELong"""
        return _VISHNU.ListSessionOptions_getEndDateOption(self, *args, **kwargs)

    def setEndDateOption(self, *args, **kwargs):
        """setEndDateOption(ListSessionOptions self, ::ecore::ELong _endDateOption)"""
        return _VISHNU.ListSessionOptions_setEndDateOption(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(ListSessionOptions self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.ListSessionOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(ListSessionOptions self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.ListSessionOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(ListSessionOptions self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.ListSessionOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(ListSessionOptions self, ::ecore::EInt _featureID)"""
        return _VISHNU.ListSessionOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(ListSessionOptions self) -> ::ecore::EClass_ptr"""
        return _VISHNU.ListSessionOptions__eClass(self, *args, **kwargs)

ListSessionOptions_swigregister = _VISHNU.ListSessionOptions_swigregister
ListSessionOptions_swigregister(ListSessionOptions)

class User(EObject):
    """Proxy of C++ UMS_Data::User class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, User, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, User, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(UMS_Data::User self) -> User"""
        this = _VISHNU.new_User(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_User
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(User self)"""
        return _VISHNU.User__initialize(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(User self) -> ::ecore::EString const &"""
        return _VISHNU.User_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(User self, ::ecore::EString const & _userId)"""
        return _VISHNU.User_setUserId(self, *args, **kwargs)

    def getPassword(self, *args, **kwargs):
        """getPassword(User self) -> ::ecore::EString const &"""
        return _VISHNU.User_getPassword(self, *args, **kwargs)

    def setPassword(self, *args, **kwargs):
        """setPassword(User self, ::ecore::EString const & _password)"""
        return _VISHNU.User_setPassword(self, *args, **kwargs)

    def getFirstname(self, *args, **kwargs):
        """getFirstname(User self) -> ::ecore::EString const &"""
        return _VISHNU.User_getFirstname(self, *args, **kwargs)

    def setFirstname(self, *args, **kwargs):
        """setFirstname(User self, ::ecore::EString const & _firstname)"""
        return _VISHNU.User_setFirstname(self, *args, **kwargs)

    def getLastname(self, *args, **kwargs):
        """getLastname(User self) -> ::ecore::EString const &"""
        return _VISHNU.User_getLastname(self, *args, **kwargs)

    def setLastname(self, *args, **kwargs):
        """setLastname(User self, ::ecore::EString const & _lastname)"""
        return _VISHNU.User_setLastname(self, *args, **kwargs)

    def getPrivilege(self, *args, **kwargs):
        """getPrivilege(User self) -> ::UMS_Data::PrivilegeType"""
        return _VISHNU.User_getPrivilege(self, *args, **kwargs)

    def setPrivilege(self, *args, **kwargs):
        """setPrivilege(User self, ::UMS_Data::PrivilegeType _privilege)"""
        return _VISHNU.User_setPrivilege(self, *args, **kwargs)

    def getEmail(self, *args, **kwargs):
        """getEmail(User self) -> ::ecore::EString const &"""
        return _VISHNU.User_getEmail(self, *args, **kwargs)

    def setEmail(self, *args, **kwargs):
        """setEmail(User self, ::ecore::EString const & _email)"""
        return _VISHNU.User_setEmail(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(User self) -> ::UMS_Data::StatusType"""
        return _VISHNU.User_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(User self, ::UMS_Data::StatusType _status)"""
        return _VISHNU.User_setStatus(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(User self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.User_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(User self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.User_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(User self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.User_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(User self, ::ecore::EInt _featureID)"""
        return _VISHNU.User_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(User self) -> ::ecore::EClass_ptr"""
        return _VISHNU.User__eClass(self, *args, **kwargs)

User_swigregister = _VISHNU.User_swigregister
User_swigregister(User)

class Command(EObject):
    """Proxy of C++ UMS_Data::Command class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Command, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Command, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(UMS_Data::Command self) -> Command"""
        this = _VISHNU.new_Command(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_Command
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(Command self)"""
        return _VISHNU.Command__initialize(self, *args, **kwargs)

    def getCommandId(self, *args, **kwargs):
        """getCommandId(Command self) -> ::ecore::EString const &"""
        return _VISHNU.Command_getCommandId(self, *args, **kwargs)

    def setCommandId(self, *args, **kwargs):
        """setCommandId(Command self, ::ecore::EString const & _commandId)"""
        return _VISHNU.Command_setCommandId(self, *args, **kwargs)

    def getSessionId(self, *args, **kwargs):
        """getSessionId(Command self) -> ::ecore::EString const &"""
        return _VISHNU.Command_getSessionId(self, *args, **kwargs)

    def setSessionId(self, *args, **kwargs):
        """setSessionId(Command self, ::ecore::EString const & _sessionId)"""
        return _VISHNU.Command_setSessionId(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(Command self) -> ::ecore::EString const &"""
        return _VISHNU.Command_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(Command self, ::ecore::EString const & _machineId)"""
        return _VISHNU.Command_setMachineId(self, *args, **kwargs)

    def getCmdDescription(self, *args, **kwargs):
        """getCmdDescription(Command self) -> ::ecore::EString const &"""
        return _VISHNU.Command_getCmdDescription(self, *args, **kwargs)

    def setCmdDescription(self, *args, **kwargs):
        """setCmdDescription(Command self, ::ecore::EString const & _cmdDescription)"""
        return _VISHNU.Command_setCmdDescription(self, *args, **kwargs)

    def getCmdStartTime(self, *args, **kwargs):
        """getCmdStartTime(Command self) -> ::ecore::ELong"""
        return _VISHNU.Command_getCmdStartTime(self, *args, **kwargs)

    def setCmdStartTime(self, *args, **kwargs):
        """setCmdStartTime(Command self, ::ecore::ELong _cmdStartTime)"""
        return _VISHNU.Command_setCmdStartTime(self, *args, **kwargs)

    def getCmdEndTime(self, *args, **kwargs):
        """getCmdEndTime(Command self) -> ::ecore::ELong"""
        return _VISHNU.Command_getCmdEndTime(self, *args, **kwargs)

    def setCmdEndTime(self, *args, **kwargs):
        """setCmdEndTime(Command self, ::ecore::ELong _cmdEndTime)"""
        return _VISHNU.Command_setCmdEndTime(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(Command self) -> ::UMS_Data::CommandStatusType"""
        return _VISHNU.Command_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(Command self, ::UMS_Data::CommandStatusType _status)"""
        return _VISHNU.Command_setStatus(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(Command self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.Command_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(Command self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.Command_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(Command self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.Command_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(Command self, ::ecore::EInt _featureID)"""
        return _VISHNU.Command_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(Command self) -> ::ecore::EClass_ptr"""
        return _VISHNU.Command__eClass(self, *args, **kwargs)

Command_swigregister = _VISHNU.Command_swigregister
Command_swigregister(Command)

class ListCmdOptions(EObject):
    """Proxy of C++ UMS_Data::ListCmdOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListCmdOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListCmdOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(UMS_Data::ListCmdOptions self) -> ListCmdOptions"""
        this = _VISHNU.new_ListCmdOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ListCmdOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(ListCmdOptions self)"""
        return _VISHNU.ListCmdOptions__initialize(self, *args, **kwargs)

    def isAdminListOption(self, *args, **kwargs):
        """isAdminListOption(ListCmdOptions self) -> ::ecore::EBoolean"""
        return _VISHNU.ListCmdOptions_isAdminListOption(self, *args, **kwargs)

    def setAdminListOption(self, *args, **kwargs):
        """setAdminListOption(ListCmdOptions self, ::ecore::EBoolean _adminListOption)"""
        return _VISHNU.ListCmdOptions_setAdminListOption(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(ListCmdOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListCmdOptions_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(ListCmdOptions self, ::ecore::EString const & _userId)"""
        return _VISHNU.ListCmdOptions_setUserId(self, *args, **kwargs)

    def getSessionId(self, *args, **kwargs):
        """getSessionId(ListCmdOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListCmdOptions_getSessionId(self, *args, **kwargs)

    def setSessionId(self, *args, **kwargs):
        """setSessionId(ListCmdOptions self, ::ecore::EString const & _sessionId)"""
        return _VISHNU.ListCmdOptions_setSessionId(self, *args, **kwargs)

    def getStartDateOption(self, *args, **kwargs):
        """getStartDateOption(ListCmdOptions self) -> ::ecore::ELong"""
        return _VISHNU.ListCmdOptions_getStartDateOption(self, *args, **kwargs)

    def setStartDateOption(self, *args, **kwargs):
        """setStartDateOption(ListCmdOptions self, ::ecore::ELong _startDateOption)"""
        return _VISHNU.ListCmdOptions_setStartDateOption(self, *args, **kwargs)

    def getEndDateOption(self, *args, **kwargs):
        """getEndDateOption(ListCmdOptions self) -> ::ecore::ELong"""
        return _VISHNU.ListCmdOptions_getEndDateOption(self, *args, **kwargs)

    def setEndDateOption(self, *args, **kwargs):
        """setEndDateOption(ListCmdOptions self, ::ecore::ELong _endDateOption)"""
        return _VISHNU.ListCmdOptions_setEndDateOption(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(ListCmdOptions self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.ListCmdOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(ListCmdOptions self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.ListCmdOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(ListCmdOptions self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.ListCmdOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(ListCmdOptions self, ::ecore::EInt _featureID)"""
        return _VISHNU.ListCmdOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(ListCmdOptions self) -> ::ecore::EClass_ptr"""
        return _VISHNU.ListCmdOptions__eClass(self, *args, **kwargs)

ListCmdOptions_swigregister = _VISHNU.ListCmdOptions_swigregister
ListCmdOptions_swigregister(ListCmdOptions)

class LocalAccount(EObject):
    """Proxy of C++ UMS_Data::LocalAccount class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalAccount, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocalAccount, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(UMS_Data::LocalAccount self) -> LocalAccount"""
        this = _VISHNU.new_LocalAccount(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_LocalAccount
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(LocalAccount self)"""
        return _VISHNU.LocalAccount__initialize(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(LocalAccount self) -> ::ecore::EString const &"""
        return _VISHNU.LocalAccount_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(LocalAccount self, ::ecore::EString const & _userId)"""
        return _VISHNU.LocalAccount_setUserId(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(LocalAccount self) -> ::ecore::EString const &"""
        return _VISHNU.LocalAccount_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(LocalAccount self, ::ecore::EString const & _machineId)"""
        return _VISHNU.LocalAccount_setMachineId(self, *args, **kwargs)

    def getAcLogin(self, *args, **kwargs):
        """getAcLogin(LocalAccount self) -> ::ecore::EString const &"""
        return _VISHNU.LocalAccount_getAcLogin(self, *args, **kwargs)

    def setAcLogin(self, *args, **kwargs):
        """setAcLogin(LocalAccount self, ::ecore::EString const & _acLogin)"""
        return _VISHNU.LocalAccount_setAcLogin(self, *args, **kwargs)

    def getSshKeyPath(self, *args, **kwargs):
        """getSshKeyPath(LocalAccount self) -> ::ecore::EString const &"""
        return _VISHNU.LocalAccount_getSshKeyPath(self, *args, **kwargs)

    def setSshKeyPath(self, *args, **kwargs):
        """setSshKeyPath(LocalAccount self, ::ecore::EString const & _sshKeyPath)"""
        return _VISHNU.LocalAccount_setSshKeyPath(self, *args, **kwargs)

    def getHomeDirectory(self, *args, **kwargs):
        """getHomeDirectory(LocalAccount self) -> ::ecore::EString const &"""
        return _VISHNU.LocalAccount_getHomeDirectory(self, *args, **kwargs)

    def setHomeDirectory(self, *args, **kwargs):
        """setHomeDirectory(LocalAccount self, ::ecore::EString const & _homeDirectory)"""
        return _VISHNU.LocalAccount_setHomeDirectory(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(LocalAccount self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.LocalAccount_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(LocalAccount self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.LocalAccount_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(LocalAccount self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.LocalAccount_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(LocalAccount self, ::ecore::EInt _featureID)"""
        return _VISHNU.LocalAccount_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(LocalAccount self) -> ::ecore::EClass_ptr"""
        return _VISHNU.LocalAccount__eClass(self, *args, **kwargs)

LocalAccount_swigregister = _VISHNU.LocalAccount_swigregister
LocalAccount_swigregister(LocalAccount)

class ListLocalAccOptions(EObject):
    """Proxy of C++ UMS_Data::ListLocalAccOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListLocalAccOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListLocalAccOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(UMS_Data::ListLocalAccOptions self) -> ListLocalAccOptions"""
        this = _VISHNU.new_ListLocalAccOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ListLocalAccOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(ListLocalAccOptions self)"""
        return _VISHNU.ListLocalAccOptions__initialize(self, *args, **kwargs)

    def isAdminListOption(self, *args, **kwargs):
        """isAdminListOption(ListLocalAccOptions self) -> ::ecore::EBoolean"""
        return _VISHNU.ListLocalAccOptions_isAdminListOption(self, *args, **kwargs)

    def setAdminListOption(self, *args, **kwargs):
        """setAdminListOption(ListLocalAccOptions self, ::ecore::EBoolean _adminListOption)"""
        return _VISHNU.ListLocalAccOptions_setAdminListOption(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(ListLocalAccOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListLocalAccOptions_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(ListLocalAccOptions self, ::ecore::EString const & _userId)"""
        return _VISHNU.ListLocalAccOptions_setUserId(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(ListLocalAccOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListLocalAccOptions_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(ListLocalAccOptions self, ::ecore::EString const & _machineId)"""
        return _VISHNU.ListLocalAccOptions_setMachineId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(ListLocalAccOptions self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.ListLocalAccOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(ListLocalAccOptions self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.ListLocalAccOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(ListLocalAccOptions self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.ListLocalAccOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(ListLocalAccOptions self, ::ecore::EInt _featureID)"""
        return _VISHNU.ListLocalAccOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(ListLocalAccOptions self) -> ::ecore::EClass_ptr"""
        return _VISHNU.ListLocalAccOptions__eClass(self, *args, **kwargs)

ListLocalAccOptions_swigregister = _VISHNU.ListLocalAccOptions_swigregister
ListLocalAccOptions_swigregister(ListLocalAccOptions)

class Machine(EObject):
    """Proxy of C++ UMS_Data::Machine class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Machine, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Machine, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(UMS_Data::Machine self) -> Machine"""
        this = _VISHNU.new_Machine(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_Machine
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(Machine self)"""
        return _VISHNU.Machine__initialize(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(Machine self) -> ::ecore::EString const &"""
        return _VISHNU.Machine_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(Machine self, ::ecore::EString const & _machineId)"""
        return _VISHNU.Machine_setMachineId(self, *args, **kwargs)

    def getName(self, *args, **kwargs):
        """getName(Machine self) -> ::ecore::EString const &"""
        return _VISHNU.Machine_getName(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        """setName(Machine self, ::ecore::EString const & _name)"""
        return _VISHNU.Machine_setName(self, *args, **kwargs)

    def getSite(self, *args, **kwargs):
        """getSite(Machine self) -> ::ecore::EString const &"""
        return _VISHNU.Machine_getSite(self, *args, **kwargs)

    def setSite(self, *args, **kwargs):
        """setSite(Machine self, ::ecore::EString const & _site)"""
        return _VISHNU.Machine_setSite(self, *args, **kwargs)

    def getMachineDescription(self, *args, **kwargs):
        """getMachineDescription(Machine self) -> ::ecore::EString const &"""
        return _VISHNU.Machine_getMachineDescription(self, *args, **kwargs)

    def setMachineDescription(self, *args, **kwargs):
        """setMachineDescription(Machine self, ::ecore::EString const & _machineDescription)"""
        return _VISHNU.Machine_setMachineDescription(self, *args, **kwargs)

    def getLanguage(self, *args, **kwargs):
        """getLanguage(Machine self) -> ::ecore::EString const &"""
        return _VISHNU.Machine_getLanguage(self, *args, **kwargs)

    def setLanguage(self, *args, **kwargs):
        """setLanguage(Machine self, ::ecore::EString const & _language)"""
        return _VISHNU.Machine_setLanguage(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(Machine self) -> ::UMS_Data::StatusType"""
        return _VISHNU.Machine_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(Machine self, ::UMS_Data::StatusType _status)"""
        return _VISHNU.Machine_setStatus(self, *args, **kwargs)

    def getSshPublicKey(self, *args, **kwargs):
        """getSshPublicKey(Machine self) -> ::ecore::EString const &"""
        return _VISHNU.Machine_getSshPublicKey(self, *args, **kwargs)

    def setSshPublicKey(self, *args, **kwargs):
        """setSshPublicKey(Machine self, ::ecore::EString const & _sshPublicKey)"""
        return _VISHNU.Machine_setSshPublicKey(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(Machine self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.Machine_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(Machine self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.Machine_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(Machine self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.Machine_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(Machine self, ::ecore::EInt _featureID)"""
        return _VISHNU.Machine_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(Machine self) -> ::ecore::EClass_ptr"""
        return _VISHNU.Machine__eClass(self, *args, **kwargs)

Machine_swigregister = _VISHNU.Machine_swigregister
Machine_swigregister(Machine)

class ListMachineOptions(EObject):
    """Proxy of C++ UMS_Data::ListMachineOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListMachineOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListMachineOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(UMS_Data::ListMachineOptions self) -> ListMachineOptions"""
        this = _VISHNU.new_ListMachineOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ListMachineOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(ListMachineOptions self)"""
        return _VISHNU.ListMachineOptions__initialize(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(ListMachineOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListMachineOptions_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(ListMachineOptions self, ::ecore::EString const & _userId)"""
        return _VISHNU.ListMachineOptions_setUserId(self, *args, **kwargs)

    def isListAllMachine(self, *args, **kwargs):
        """isListAllMachine(ListMachineOptions self) -> ::ecore::EBoolean"""
        return _VISHNU.ListMachineOptions_isListAllMachine(self, *args, **kwargs)

    def setListAllMachine(self, *args, **kwargs):
        """setListAllMachine(ListMachineOptions self, ::ecore::EBoolean _listAllMachine)"""
        return _VISHNU.ListMachineOptions_setListAllMachine(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(ListMachineOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListMachineOptions_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(ListMachineOptions self, ::ecore::EString const & _machineId)"""
        return _VISHNU.ListMachineOptions_setMachineId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(ListMachineOptions self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.ListMachineOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(ListMachineOptions self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.ListMachineOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(ListMachineOptions self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.ListMachineOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(ListMachineOptions self, ::ecore::EInt _featureID)"""
        return _VISHNU.ListMachineOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(ListMachineOptions self) -> ::ecore::EClass_ptr"""
        return _VISHNU.ListMachineOptions__eClass(self, *args, **kwargs)

ListMachineOptions_swigregister = _VISHNU.ListMachineOptions_swigregister
ListMachineOptions_swigregister(ListMachineOptions)

class OptionValue(EObject):
    """Proxy of C++ UMS_Data::OptionValue class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionValue, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptionValue, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(UMS_Data::OptionValue self) -> OptionValue"""
        this = _VISHNU.new_OptionValue(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_OptionValue
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(OptionValue self)"""
        return _VISHNU.OptionValue__initialize(self, *args, **kwargs)

    def getOptionName(self, *args, **kwargs):
        """getOptionName(OptionValue self) -> ::ecore::EString const &"""
        return _VISHNU.OptionValue_getOptionName(self, *args, **kwargs)

    def setOptionName(self, *args, **kwargs):
        """setOptionName(OptionValue self, ::ecore::EString const & _optionName)"""
        return _VISHNU.OptionValue_setOptionName(self, *args, **kwargs)

    def getValue(self, *args, **kwargs):
        """getValue(OptionValue self) -> ::ecore::EString const &"""
        return _VISHNU.OptionValue_getValue(self, *args, **kwargs)

    def setValue(self, *args, **kwargs):
        """setValue(OptionValue self, ::ecore::EString const & _value)"""
        return _VISHNU.OptionValue_setValue(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(OptionValue self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.OptionValue_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(OptionValue self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.OptionValue_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(OptionValue self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.OptionValue_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(OptionValue self, ::ecore::EInt _featureID)"""
        return _VISHNU.OptionValue_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(OptionValue self) -> ::ecore::EClass_ptr"""
        return _VISHNU.OptionValue__eClass(self, *args, **kwargs)

OptionValue_swigregister = _VISHNU.OptionValue_swigregister
OptionValue_swigregister(OptionValue)

class ListOptOptions(EObject):
    """Proxy of C++ UMS_Data::ListOptOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOptOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOptOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(UMS_Data::ListOptOptions self) -> ListOptOptions"""
        this = _VISHNU.new_ListOptOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ListOptOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(ListOptOptions self)"""
        return _VISHNU.ListOptOptions__initialize(self, *args, **kwargs)

    def isListAllDeftValue(self, *args, **kwargs):
        """isListAllDeftValue(ListOptOptions self) -> ::ecore::EBoolean"""
        return _VISHNU.ListOptOptions_isListAllDeftValue(self, *args, **kwargs)

    def setListAllDeftValue(self, *args, **kwargs):
        """setListAllDeftValue(ListOptOptions self, ::ecore::EBoolean _listAllDeftValue)"""
        return _VISHNU.ListOptOptions_setListAllDeftValue(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(ListOptOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListOptOptions_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(ListOptOptions self, ::ecore::EString const & _userId)"""
        return _VISHNU.ListOptOptions_setUserId(self, *args, **kwargs)

    def getOptionName(self, *args, **kwargs):
        """getOptionName(ListOptOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListOptOptions_getOptionName(self, *args, **kwargs)

    def setOptionName(self, *args, **kwargs):
        """setOptionName(ListOptOptions self, ::ecore::EString const & _optionName)"""
        return _VISHNU.ListOptOptions_setOptionName(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(ListOptOptions self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.ListOptOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(ListOptOptions self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.ListOptOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(ListOptOptions self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.ListOptOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(ListOptOptions self, ::ecore::EInt _featureID)"""
        return _VISHNU.ListOptOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(ListOptOptions self) -> ::ecore::EClass_ptr"""
        return _VISHNU.ListOptOptions__eClass(self, *args, **kwargs)

ListOptOptions_swigregister = _VISHNU.ListOptOptions_swigregister
ListOptOptions_swigregister(ListOptOptions)

class AuthAccount(EObject):
    """Proxy of C++ UMS_Data::AuthAccount class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuthAccount, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AuthAccount, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(UMS_Data::AuthAccount self) -> AuthAccount"""
        this = _VISHNU.new_AuthAccount(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_AuthAccount
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(AuthAccount self)"""
        return _VISHNU.AuthAccount__initialize(self, *args, **kwargs)

    def getAuthSystemId(self, *args, **kwargs):
        """getAuthSystemId(AuthAccount self) -> ::ecore::EString const &"""
        return _VISHNU.AuthAccount_getAuthSystemId(self, *args, **kwargs)

    def setAuthSystemId(self, *args, **kwargs):
        """setAuthSystemId(AuthAccount self, ::ecore::EString const & _authSystemId)"""
        return _VISHNU.AuthAccount_setAuthSystemId(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(AuthAccount self) -> ::ecore::EString const &"""
        return _VISHNU.AuthAccount_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(AuthAccount self, ::ecore::EString const & _userId)"""
        return _VISHNU.AuthAccount_setUserId(self, *args, **kwargs)

    def getAcLogin(self, *args, **kwargs):
        """getAcLogin(AuthAccount self) -> ::ecore::EString const &"""
        return _VISHNU.AuthAccount_getAcLogin(self, *args, **kwargs)

    def setAcLogin(self, *args, **kwargs):
        """setAcLogin(AuthAccount self, ::ecore::EString const & _acLogin)"""
        return _VISHNU.AuthAccount_setAcLogin(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(AuthAccount self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.AuthAccount_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(AuthAccount self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.AuthAccount_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(AuthAccount self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.AuthAccount_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(AuthAccount self, ::ecore::EInt _featureID)"""
        return _VISHNU.AuthAccount_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(AuthAccount self) -> ::ecore::EClass_ptr"""
        return _VISHNU.AuthAccount__eClass(self, *args, **kwargs)

AuthAccount_swigregister = _VISHNU.AuthAccount_swigregister
AuthAccount_swigregister(AuthAccount)

class AuthSystem(EObject):
    """Proxy of C++ UMS_Data::AuthSystem class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuthSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AuthSystem, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(UMS_Data::AuthSystem self) -> AuthSystem"""
        this = _VISHNU.new_AuthSystem(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_AuthSystem
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(AuthSystem self)"""
        return _VISHNU.AuthSystem__initialize(self, *args, **kwargs)

    def getAuthSystemId(self, *args, **kwargs):
        """getAuthSystemId(AuthSystem self) -> ::ecore::EString const &"""
        return _VISHNU.AuthSystem_getAuthSystemId(self, *args, **kwargs)

    def setAuthSystemId(self, *args, **kwargs):
        """setAuthSystemId(AuthSystem self, ::ecore::EString const & _authSystemId)"""
        return _VISHNU.AuthSystem_setAuthSystemId(self, *args, **kwargs)

    def getName(self, *args, **kwargs):
        """getName(AuthSystem self) -> ::ecore::EString const &"""
        return _VISHNU.AuthSystem_getName(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        """setName(AuthSystem self, ::ecore::EString const & _name)"""
        return _VISHNU.AuthSystem_setName(self, *args, **kwargs)

    def getURI(self, *args, **kwargs):
        """getURI(AuthSystem self) -> ::ecore::EString const &"""
        return _VISHNU.AuthSystem_getURI(self, *args, **kwargs)

    def setURI(self, *args, **kwargs):
        """setURI(AuthSystem self, ::ecore::EString const & _URI)"""
        return _VISHNU.AuthSystem_setURI(self, *args, **kwargs)

    def getAuthLogin(self, *args, **kwargs):
        """getAuthLogin(AuthSystem self) -> ::ecore::EString const &"""
        return _VISHNU.AuthSystem_getAuthLogin(self, *args, **kwargs)

    def setAuthLogin(self, *args, **kwargs):
        """setAuthLogin(AuthSystem self, ::ecore::EString const & _authLogin)"""
        return _VISHNU.AuthSystem_setAuthLogin(self, *args, **kwargs)

    def getAuthPassword(self, *args, **kwargs):
        """getAuthPassword(AuthSystem self) -> ::ecore::EString const &"""
        return _VISHNU.AuthSystem_getAuthPassword(self, *args, **kwargs)

    def setAuthPassword(self, *args, **kwargs):
        """setAuthPassword(AuthSystem self, ::ecore::EString const & _authPassword)"""
        return _VISHNU.AuthSystem_setAuthPassword(self, *args, **kwargs)

    def getUserPasswordEncryption(self, *args, **kwargs):
        """getUserPasswordEncryption(AuthSystem self) -> ::UMS_Data::EncryptionMethod"""
        return _VISHNU.AuthSystem_getUserPasswordEncryption(self, *args, **kwargs)

    def setUserPasswordEncryption(self, *args, **kwargs):
        """setUserPasswordEncryption(AuthSystem self, ::UMS_Data::EncryptionMethod _userPasswordEncryption)"""
        return _VISHNU.AuthSystem_setUserPasswordEncryption(self, *args, **kwargs)

    def getType(self, *args, **kwargs):
        """getType(AuthSystem self) -> ::UMS_Data::AuthType"""
        return _VISHNU.AuthSystem_getType(self, *args, **kwargs)

    def setType(self, *args, **kwargs):
        """setType(AuthSystem self, ::UMS_Data::AuthType _type)"""
        return _VISHNU.AuthSystem_setType(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(AuthSystem self) -> ::UMS_Data::StatusType"""
        return _VISHNU.AuthSystem_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(AuthSystem self, ::UMS_Data::StatusType _status)"""
        return _VISHNU.AuthSystem_setStatus(self, *args, **kwargs)

    def getLdapBase(self, *args, **kwargs):
        """getLdapBase(AuthSystem self) -> ::ecore::EString const &"""
        return _VISHNU.AuthSystem_getLdapBase(self, *args, **kwargs)

    def setLdapBase(self, *args, **kwargs):
        """setLdapBase(AuthSystem self, ::ecore::EString const & _ldapBase)"""
        return _VISHNU.AuthSystem_setLdapBase(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(AuthSystem self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.AuthSystem_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(AuthSystem self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.AuthSystem_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(AuthSystem self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.AuthSystem_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(AuthSystem self, ::ecore::EInt _featureID)"""
        return _VISHNU.AuthSystem_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(AuthSystem self) -> ::ecore::EClass_ptr"""
        return _VISHNU.AuthSystem__eClass(self, *args, **kwargs)

AuthSystem_swigregister = _VISHNU.AuthSystem_swigregister
AuthSystem_swigregister(AuthSystem)

class ListAuthSysOptions(EObject):
    """Proxy of C++ UMS_Data::ListAuthSysOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListAuthSysOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListAuthSysOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(UMS_Data::ListAuthSysOptions self) -> ListAuthSysOptions"""
        this = _VISHNU.new_ListAuthSysOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ListAuthSysOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(ListAuthSysOptions self)"""
        return _VISHNU.ListAuthSysOptions__initialize(self, *args, **kwargs)

    def isListAllAuthSystems(self, *args, **kwargs):
        """isListAllAuthSystems(ListAuthSysOptions self) -> ::ecore::EBoolean"""
        return _VISHNU.ListAuthSysOptions_isListAllAuthSystems(self, *args, **kwargs)

    def setListAllAuthSystems(self, *args, **kwargs):
        """setListAllAuthSystems(ListAuthSysOptions self, ::ecore::EBoolean _listAllAuthSystems)"""
        return _VISHNU.ListAuthSysOptions_setListAllAuthSystems(self, *args, **kwargs)

    def isListFullInfo(self, *args, **kwargs):
        """isListFullInfo(ListAuthSysOptions self) -> ::ecore::EBoolean"""
        return _VISHNU.ListAuthSysOptions_isListFullInfo(self, *args, **kwargs)

    def setListFullInfo(self, *args, **kwargs):
        """setListFullInfo(ListAuthSysOptions self, ::ecore::EBoolean _listFullInfo)"""
        return _VISHNU.ListAuthSysOptions_setListFullInfo(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(ListAuthSysOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListAuthSysOptions_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(ListAuthSysOptions self, ::ecore::EString const & _userId)"""
        return _VISHNU.ListAuthSysOptions_setUserId(self, *args, **kwargs)

    def getAuthSystemId(self, *args, **kwargs):
        """getAuthSystemId(ListAuthSysOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListAuthSysOptions_getAuthSystemId(self, *args, **kwargs)

    def setAuthSystemId(self, *args, **kwargs):
        """setAuthSystemId(ListAuthSysOptions self, ::ecore::EString const & _authSystemId)"""
        return _VISHNU.ListAuthSysOptions_setAuthSystemId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(ListAuthSysOptions self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.ListAuthSysOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(ListAuthSysOptions self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.ListAuthSysOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(ListAuthSysOptions self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.ListAuthSysOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(ListAuthSysOptions self, ::ecore::EInt _featureID)"""
        return _VISHNU.ListAuthSysOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(ListAuthSysOptions self) -> ::ecore::EClass_ptr"""
        return _VISHNU.ListAuthSysOptions__eClass(self, *args, **kwargs)

ListAuthSysOptions_swigregister = _VISHNU.ListAuthSysOptions_swigregister
ListAuthSysOptions_swigregister(ListAuthSysOptions)

class ListAuthAccOptions(EObject):
    """Proxy of C++ UMS_Data::ListAuthAccOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListAuthAccOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListAuthAccOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(UMS_Data::ListAuthAccOptions self) -> ListAuthAccOptions"""
        this = _VISHNU.new_ListAuthAccOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ListAuthAccOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(ListAuthAccOptions self)"""
        return _VISHNU.ListAuthAccOptions__initialize(self, *args, **kwargs)

    def isListAll(self, *args, **kwargs):
        """isListAll(ListAuthAccOptions self) -> ::ecore::EBoolean"""
        return _VISHNU.ListAuthAccOptions_isListAll(self, *args, **kwargs)

    def setListAll(self, *args, **kwargs):
        """setListAll(ListAuthAccOptions self, ::ecore::EBoolean _listAll)"""
        return _VISHNU.ListAuthAccOptions_setListAll(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(ListAuthAccOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListAuthAccOptions_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(ListAuthAccOptions self, ::ecore::EString const & _userId)"""
        return _VISHNU.ListAuthAccOptions_setUserId(self, *args, **kwargs)

    def getAuthSystemId(self, *args, **kwargs):
        """getAuthSystemId(ListAuthAccOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListAuthAccOptions_getAuthSystemId(self, *args, **kwargs)

    def setAuthSystemId(self, *args, **kwargs):
        """setAuthSystemId(ListAuthAccOptions self, ::ecore::EString const & _authSystemId)"""
        return _VISHNU.ListAuthAccOptions_setAuthSystemId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(ListAuthAccOptions self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.ListAuthAccOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(ListAuthAccOptions self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.ListAuthAccOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(ListAuthAccOptions self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.ListAuthAccOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(ListAuthAccOptions self, ::ecore::EInt _featureID)"""
        return _VISHNU.ListAuthAccOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(ListAuthAccOptions self) -> ::ecore::EClass_ptr"""
        return _VISHNU.ListAuthAccOptions__eClass(self, *args, **kwargs)

ListAuthAccOptions_swigregister = _VISHNU.ListAuthAccOptions_swigregister
ListAuthAccOptions_swigregister(ListAuthAccOptions)

class Job(EObject):
    """Proxy of C++ TMS_Data::Job class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Job, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Job, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(TMS_Data::Job self) -> Job"""
        this = _VISHNU.new_Job(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_Job
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(Job self)"""
        return _VISHNU.Job__initialize(self, *args, **kwargs)

    def getSessionId(self, *args, **kwargs):
        """getSessionId(Job self) -> ::ecore::EString const &"""
        return _VISHNU.Job_getSessionId(self, *args, **kwargs)

    def setSessionId(self, *args, **kwargs):
        """setSessionId(Job self, ::ecore::EString const & _sessionId)"""
        return _VISHNU.Job_setSessionId(self, *args, **kwargs)

    def getSubmitMachineId(self, *args, **kwargs):
        """getSubmitMachineId(Job self) -> ::ecore::EString const &"""
        return _VISHNU.Job_getSubmitMachineId(self, *args, **kwargs)

    def setSubmitMachineId(self, *args, **kwargs):
        """setSubmitMachineId(Job self, ::ecore::EString const & _submitMachineId)"""
        return _VISHNU.Job_setSubmitMachineId(self, *args, **kwargs)

    def getSubmitMachineName(self, *args, **kwargs):
        """getSubmitMachineName(Job self) -> ::ecore::EString const &"""
        return _VISHNU.Job_getSubmitMachineName(self, *args, **kwargs)

    def setSubmitMachineName(self, *args, **kwargs):
        """setSubmitMachineName(Job self, ::ecore::EString const & _submitMachineName)"""
        return _VISHNU.Job_setSubmitMachineName(self, *args, **kwargs)

    def getJobId(self, *args, **kwargs):
        """getJobId(Job self) -> ::ecore::EString const &"""
        return _VISHNU.Job_getJobId(self, *args, **kwargs)

    def setJobId(self, *args, **kwargs):
        """setJobId(Job self, ::ecore::EString const & _jobId)"""
        return _VISHNU.Job_setJobId(self, *args, **kwargs)

    def getJobName(self, *args, **kwargs):
        """getJobName(Job self) -> ::ecore::EString const &"""
        return _VISHNU.Job_getJobName(self, *args, **kwargs)

    def setJobName(self, *args, **kwargs):
        """setJobName(Job self, ::ecore::EString const & _jobName)"""
        return _VISHNU.Job_setJobName(self, *args, **kwargs)

    def getJobPath(self, *args, **kwargs):
        """getJobPath(Job self) -> ::ecore::EString const &"""
        return _VISHNU.Job_getJobPath(self, *args, **kwargs)

    def setJobPath(self, *args, **kwargs):
        """setJobPath(Job self, ::ecore::EString const & _jobPath)"""
        return _VISHNU.Job_setJobPath(self, *args, **kwargs)

    def getOutputPath(self, *args, **kwargs):
        """getOutputPath(Job self) -> ::ecore::EString const &"""
        return _VISHNU.Job_getOutputPath(self, *args, **kwargs)

    def setOutputPath(self, *args, **kwargs):
        """setOutputPath(Job self, ::ecore::EString const & _outputPath)"""
        return _VISHNU.Job_setOutputPath(self, *args, **kwargs)

    def getErrorPath(self, *args, **kwargs):
        """getErrorPath(Job self) -> ::ecore::EString const &"""
        return _VISHNU.Job_getErrorPath(self, *args, **kwargs)

    def setErrorPath(self, *args, **kwargs):
        """setErrorPath(Job self, ::ecore::EString const & _errorPath)"""
        return _VISHNU.Job_setErrorPath(self, *args, **kwargs)

    def getJobPrio(self, *args, **kwargs):
        """getJobPrio(Job self) -> ::TMS_Data::JobPriority"""
        return _VISHNU.Job_getJobPrio(self, *args, **kwargs)

    def setJobPrio(self, *args, **kwargs):
        """setJobPrio(Job self, ::TMS_Data::JobPriority _jobPrio)"""
        return _VISHNU.Job_setJobPrio(self, *args, **kwargs)

    def getNbCpus(self, *args, **kwargs):
        """getNbCpus(Job self) -> ::ecore::EInt"""
        return _VISHNU.Job_getNbCpus(self, *args, **kwargs)

    def setNbCpus(self, *args, **kwargs):
        """setNbCpus(Job self, ::ecore::EInt _nbCpus)"""
        return _VISHNU.Job_setNbCpus(self, *args, **kwargs)

    def getJobWorkingDir(self, *args, **kwargs):
        """getJobWorkingDir(Job self) -> ::ecore::EString const &"""
        return _VISHNU.Job_getJobWorkingDir(self, *args, **kwargs)

    def setJobWorkingDir(self, *args, **kwargs):
        """setJobWorkingDir(Job self, ::ecore::EString const & _jobWorkingDir)"""
        return _VISHNU.Job_setJobWorkingDir(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(Job self) -> ::TMS_Data::JobStatus"""
        return _VISHNU.Job_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(Job self, ::TMS_Data::JobStatus _status)"""
        return _VISHNU.Job_setStatus(self, *args, **kwargs)

    def getSubmitDate(self, *args, **kwargs):
        """getSubmitDate(Job self) -> ::ecore::ELong"""
        return _VISHNU.Job_getSubmitDate(self, *args, **kwargs)

    def setSubmitDate(self, *args, **kwargs):
        """setSubmitDate(Job self, ::ecore::ELong _submitDate)"""
        return _VISHNU.Job_setSubmitDate(self, *args, **kwargs)

    def getEndDate(self, *args, **kwargs):
        """getEndDate(Job self) -> ::ecore::ELong"""
        return _VISHNU.Job_getEndDate(self, *args, **kwargs)

    def setEndDate(self, *args, **kwargs):
        """setEndDate(Job self, ::ecore::ELong _endDate)"""
        return _VISHNU.Job_setEndDate(self, *args, **kwargs)

    def getOwner(self, *args, **kwargs):
        """getOwner(Job self) -> ::ecore::EString const &"""
        return _VISHNU.Job_getOwner(self, *args, **kwargs)

    def setOwner(self, *args, **kwargs):
        """setOwner(Job self, ::ecore::EString const & _owner)"""
        return _VISHNU.Job_setOwner(self, *args, **kwargs)

    def getJobQueue(self, *args, **kwargs):
        """getJobQueue(Job self) -> ::ecore::EString const &"""
        return _VISHNU.Job_getJobQueue(self, *args, **kwargs)

    def setJobQueue(self, *args, **kwargs):
        """setJobQueue(Job self, ::ecore::EString const & _jobQueue)"""
        return _VISHNU.Job_setJobQueue(self, *args, **kwargs)

    def getWallClockLimit(self, *args, **kwargs):
        """getWallClockLimit(Job self) -> ::ecore::ELong"""
        return _VISHNU.Job_getWallClockLimit(self, *args, **kwargs)

    def setWallClockLimit(self, *args, **kwargs):
        """setWallClockLimit(Job self, ::ecore::ELong _wallClockLimit)"""
        return _VISHNU.Job_setWallClockLimit(self, *args, **kwargs)

    def getGroupName(self, *args, **kwargs):
        """getGroupName(Job self) -> ::ecore::EString const &"""
        return _VISHNU.Job_getGroupName(self, *args, **kwargs)

    def setGroupName(self, *args, **kwargs):
        """setGroupName(Job self, ::ecore::EString const & _groupName)"""
        return _VISHNU.Job_setGroupName(self, *args, **kwargs)

    def getJobDescription(self, *args, **kwargs):
        """getJobDescription(Job self) -> ::ecore::EString const &"""
        return _VISHNU.Job_getJobDescription(self, *args, **kwargs)

    def setJobDescription(self, *args, **kwargs):
        """setJobDescription(Job self, ::ecore::EString const & _jobDescription)"""
        return _VISHNU.Job_setJobDescription(self, *args, **kwargs)

    def getMemLimit(self, *args, **kwargs):
        """getMemLimit(Job self) -> ::ecore::EInt"""
        return _VISHNU.Job_getMemLimit(self, *args, **kwargs)

    def setMemLimit(self, *args, **kwargs):
        """setMemLimit(Job self, ::ecore::EInt _memLimit)"""
        return _VISHNU.Job_setMemLimit(self, *args, **kwargs)

    def getNbNodes(self, *args, **kwargs):
        """getNbNodes(Job self) -> ::ecore::EInt"""
        return _VISHNU.Job_getNbNodes(self, *args, **kwargs)

    def setNbNodes(self, *args, **kwargs):
        """setNbNodes(Job self, ::ecore::EInt _nbNodes)"""
        return _VISHNU.Job_setNbNodes(self, *args, **kwargs)

    def getNbNodesAndCpuPerNode(self, *args, **kwargs):
        """getNbNodesAndCpuPerNode(Job self) -> ::ecore::EString const &"""
        return _VISHNU.Job_getNbNodesAndCpuPerNode(self, *args, **kwargs)

    def setNbNodesAndCpuPerNode(self, *args, **kwargs):
        """setNbNodesAndCpuPerNode(Job self, ::ecore::EString const & _nbNodesAndCpuPerNode)"""
        return _VISHNU.Job_setNbNodesAndCpuPerNode(self, *args, **kwargs)

    def getBatchJobId(self, *args, **kwargs):
        """getBatchJobId(Job self) -> ::ecore::EString const &"""
        return _VISHNU.Job_getBatchJobId(self, *args, **kwargs)

    def setBatchJobId(self, *args, **kwargs):
        """setBatchJobId(Job self, ::ecore::EString const & _batchJobId)"""
        return _VISHNU.Job_setBatchJobId(self, *args, **kwargs)

    def getOutputDir(self, *args, **kwargs):
        """getOutputDir(Job self) -> ::ecore::EString const &"""
        return _VISHNU.Job_getOutputDir(self, *args, **kwargs)

    def setOutputDir(self, *args, **kwargs):
        """setOutputDir(Job self, ::ecore::EString const & _outputDir)"""
        return _VISHNU.Job_setOutputDir(self, *args, **kwargs)

    def getWorkId(self, *args, **kwargs):
        """getWorkId(Job self) -> ::ecore::ELong"""
        return _VISHNU.Job_getWorkId(self, *args, **kwargs)

    def setWorkId(self, *args, **kwargs):
        """setWorkId(Job self, ::ecore::ELong _workId)"""
        return _VISHNU.Job_setWorkId(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(Job self) -> ::ecore::EString const &"""
        return _VISHNU.Job_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(Job self, ::ecore::EString const & _userId)"""
        return _VISHNU.Job_setUserId(self, *args, **kwargs)

    def getVmId(self, *args, **kwargs):
        """getVmId(Job self) -> ::ecore::EString const &"""
        return _VISHNU.Job_getVmId(self, *args, **kwargs)

    def setVmId(self, *args, **kwargs):
        """setVmId(Job self, ::ecore::EString const & _vmId)"""
        return _VISHNU.Job_setVmId(self, *args, **kwargs)

    def getVmIp(self, *args, **kwargs):
        """getVmIp(Job self) -> ::ecore::EString const &"""
        return _VISHNU.Job_getVmIp(self, *args, **kwargs)

    def setVmIp(self, *args, **kwargs):
        """setVmIp(Job self, ::ecore::EString const & _vmIp)"""
        return _VISHNU.Job_setVmIp(self, *args, **kwargs)

    def getRelatedSteps(self, *args, **kwargs):
        """getRelatedSteps(self) -> EString"""
        return _VISHNU.Job_getRelatedSteps(self, *args, **kwargs)

    def setRelatedSteps(self, *args, **kwargs):
        """setRelatedSteps(self, EString _relatedSteps)"""
        return _VISHNU.Job_setRelatedSteps(self, *args, **kwargs)

    def getSubmitError(self, *args, **kwargs):
        """getSubmitError(self) -> EString"""
        return _VISHNU.Job_getSubmitError(self, *args, **kwargs)

    def setSubmitError(self, *args, **kwargs):
        """setSubmitError(self, EString _submitError)"""
        return _VISHNU.Job_setSubmitError(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(Job self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.Job_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(Job self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.Job_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(Job self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.Job_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(Job self, ::ecore::EInt _featureID)"""
        return _VISHNU.Job_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(Job self) -> ::ecore::EClass_ptr"""
        return _VISHNU.Job__eClass(self, *args, **kwargs)

Job_swigregister = _VISHNU.Job_swigregister
Job_swigregister(Job)

class JobResult(EObject):
    """Proxy of C++ TMS_Data::JobResult class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JobResult, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, JobResult, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(TMS_Data::JobResult self) -> JobResult"""
        this = _VISHNU.new_JobResult(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_JobResult
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(JobResult self)"""
        return _VISHNU.JobResult__initialize(self, *args, **kwargs)

    def getJobId(self, *args, **kwargs):
        """getJobId(JobResult self) -> ::ecore::EString const &"""
        return _VISHNU.JobResult_getJobId(self, *args, **kwargs)

    def setJobId(self, *args, **kwargs):
        """setJobId(JobResult self, ::ecore::EString const & _jobId)"""
        return _VISHNU.JobResult_setJobId(self, *args, **kwargs)

    def getOutputPath(self, *args, **kwargs):
        """getOutputPath(JobResult self) -> ::ecore::EString const &"""
        return _VISHNU.JobResult_getOutputPath(self, *args, **kwargs)

    def setOutputPath(self, *args, **kwargs):
        """setOutputPath(JobResult self, ::ecore::EString const & _outputPath)"""
        return _VISHNU.JobResult_setOutputPath(self, *args, **kwargs)

    def getErrorPath(self, *args, **kwargs):
        """getErrorPath(JobResult self) -> ::ecore::EString const &"""
        return _VISHNU.JobResult_getErrorPath(self, *args, **kwargs)

    def setErrorPath(self, *args, **kwargs):
        """setErrorPath(JobResult self, ::ecore::EString const & _errorPath)"""
        return _VISHNU.JobResult_setErrorPath(self, *args, **kwargs)

    def getOutputDir(self, *args, **kwargs):
        """getOutputDir(JobResult self) -> ::ecore::EString const &"""
        return _VISHNU.JobResult_getOutputDir(self, *args, **kwargs)

    def setOutputDir(self, *args, **kwargs):
        """setOutputDir(JobResult self, ::ecore::EString const & _outputDir)"""
        return _VISHNU.JobResult_setOutputDir(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(JobResult self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.JobResult_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(JobResult self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.JobResult_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(JobResult self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.JobResult_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(JobResult self, ::ecore::EInt _featureID)"""
        return _VISHNU.JobResult_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(JobResult self) -> ::ecore::EClass_ptr"""
        return _VISHNU.JobResult__eClass(self, *args, **kwargs)

JobResult_swigregister = _VISHNU.JobResult_swigregister
JobResult_swigregister(JobResult)

class ListJobsOptions(EObject):
    """Proxy of C++ TMS_Data::ListJobsOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListJobsOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListJobsOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(TMS_Data::ListJobsOptions self) -> ListJobsOptions"""
        this = _VISHNU.new_ListJobsOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ListJobsOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(ListJobsOptions self)"""
        return _VISHNU.ListJobsOptions__initialize(self, *args, **kwargs)

    def getJobId(self, *args, **kwargs):
        """getJobId(ListJobsOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListJobsOptions_getJobId(self, *args, **kwargs)

    def setJobId(self, *args, **kwargs):
        """setJobId(ListJobsOptions self, ::ecore::EString const & _jobId)"""
        return _VISHNU.ListJobsOptions_setJobId(self, *args, **kwargs)

    def getNbCpu(self, *args, **kwargs):
        """getNbCpu(ListJobsOptions self) -> ::ecore::EInt"""
        return _VISHNU.ListJobsOptions_getNbCpu(self, *args, **kwargs)

    def setNbCpu(self, *args, **kwargs):
        """setNbCpu(ListJobsOptions self, ::ecore::EInt _nbCpu)"""
        return _VISHNU.ListJobsOptions_setNbCpu(self, *args, **kwargs)

    def getFromSubmitDate(self, *args, **kwargs):
        """getFromSubmitDate(ListJobsOptions self) -> ::ecore::ELong"""
        return _VISHNU.ListJobsOptions_getFromSubmitDate(self, *args, **kwargs)

    def setFromSubmitDate(self, *args, **kwargs):
        """setFromSubmitDate(ListJobsOptions self, ::ecore::ELong _fromSubmitDate)"""
        return _VISHNU.ListJobsOptions_setFromSubmitDate(self, *args, **kwargs)

    def getToSubmitDate(self, *args, **kwargs):
        """getToSubmitDate(ListJobsOptions self) -> ::ecore::ELong"""
        return _VISHNU.ListJobsOptions_getToSubmitDate(self, *args, **kwargs)

    def setToSubmitDate(self, *args, **kwargs):
        """setToSubmitDate(ListJobsOptions self, ::ecore::ELong _toSubmitDate)"""
        return _VISHNU.ListJobsOptions_setToSubmitDate(self, *args, **kwargs)

    def getOwner(self, *args, **kwargs):
        """getOwner(ListJobsOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListJobsOptions_getOwner(self, *args, **kwargs)

    def setOwner(self, *args, **kwargs):
        """setOwner(ListJobsOptions self, ::ecore::EString const & _owner)"""
        return _VISHNU.ListJobsOptions_setOwner(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(ListJobsOptions self) -> ::TMS_Data::JobStatus"""
        return _VISHNU.ListJobsOptions_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(ListJobsOptions self, ::TMS_Data::JobStatus _status)"""
        return _VISHNU.ListJobsOptions_setStatus(self, *args, **kwargs)

    def getPriority(self, *args, **kwargs):
        """getPriority(ListJobsOptions self) -> ::TMS_Data::JobPriority"""
        return _VISHNU.ListJobsOptions_getPriority(self, *args, **kwargs)

    def setPriority(self, *args, **kwargs):
        """setPriority(ListJobsOptions self, ::TMS_Data::JobPriority _priority)"""
        return _VISHNU.ListJobsOptions_setPriority(self, *args, **kwargs)

    def getQueue(self, *args, **kwargs):
        """getQueue(ListJobsOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListJobsOptions_getQueue(self, *args, **kwargs)

    def setQueue(self, *args, **kwargs):
        """setQueue(ListJobsOptions self, ::ecore::EString const & _queue)"""
        return _VISHNU.ListJobsOptions_setQueue(self, *args, **kwargs)

    def getMultipleStatus(self, *args, **kwargs):
        """getMultipleStatus(ListJobsOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListJobsOptions_getMultipleStatus(self, *args, **kwargs)

    def setMultipleStatus(self, *args, **kwargs):
        """setMultipleStatus(ListJobsOptions self, ::ecore::EString const & _multipleStatus)"""
        return _VISHNU.ListJobsOptions_setMultipleStatus(self, *args, **kwargs)

    def isBatchJob(self, *args, **kwargs):
        """isBatchJob(ListJobsOptions self) -> ::ecore::EBoolean"""
        return _VISHNU.ListJobsOptions_isBatchJob(self, *args, **kwargs)

    def setBatchJob(self, *args, **kwargs):
        """setBatchJob(ListJobsOptions self, ::ecore::EBoolean _batchJob)"""
        return _VISHNU.ListJobsOptions_setBatchJob(self, *args, **kwargs)

    def getWorkId(self, *args, **kwargs):
        """getWorkId(ListJobsOptions self) -> ::ecore::ELong"""
        return _VISHNU.ListJobsOptions_getWorkId(self, *args, **kwargs)

    def setWorkId(self, *args, **kwargs):
        """setWorkId(ListJobsOptions self, ::ecore::ELong _workId)"""
        return _VISHNU.ListJobsOptions_setWorkId(self, *args, **kwargs)

    def isListAll(self, *args, **kwargs):
        """isListAll(ListJobsOptions self) -> ::ecore::EBoolean"""
        return _VISHNU.ListJobsOptions_isListAll(self, *args, **kwargs)

    def setListAll(self, *args, **kwargs):
        """setListAll(ListJobsOptions self, ::ecore::EBoolean _listAll)"""
        return _VISHNU.ListJobsOptions_setListAll(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(ListJobsOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ListJobsOptions_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(ListJobsOptions self, ::ecore::EString const & _machineId)"""
        return _VISHNU.ListJobsOptions_setMachineId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(ListJobsOptions self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.ListJobsOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(ListJobsOptions self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.ListJobsOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(ListJobsOptions self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.ListJobsOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(ListJobsOptions self, ::ecore::EInt _featureID)"""
        return _VISHNU.ListJobsOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(ListJobsOptions self) -> ::ecore::EClass_ptr"""
        return _VISHNU.ListJobsOptions__eClass(self, *args, **kwargs)

ListJobsOptions_swigregister = _VISHNU.ListJobsOptions_swigregister
ListJobsOptions_swigregister(ListJobsOptions)

class ProgressOptions(EObject):
    """Proxy of C++ TMS_Data::ProgressOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProgressOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProgressOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(TMS_Data::ProgressOptions self) -> ProgressOptions"""
        this = _VISHNU.new_ProgressOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_ProgressOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(ProgressOptions self)"""
        return _VISHNU.ProgressOptions__initialize(self, *args, **kwargs)

    def getJobId(self, *args, **kwargs):
        """getJobId(ProgressOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ProgressOptions_getJobId(self, *args, **kwargs)

    def setJobId(self, *args, **kwargs):
        """setJobId(ProgressOptions self, ::ecore::EString const & _jobId)"""
        return _VISHNU.ProgressOptions_setJobId(self, *args, **kwargs)

    def getUser(self, *args, **kwargs):
        """getUser(ProgressOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ProgressOptions_getUser(self, *args, **kwargs)

    def setUser(self, *args, **kwargs):
        """setUser(ProgressOptions self, ::ecore::EString const & _user)"""
        return _VISHNU.ProgressOptions_setUser(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(ProgressOptions self) -> ::ecore::EString const &"""
        return _VISHNU.ProgressOptions_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(ProgressOptions self, ::ecore::EString const & _machineId)"""
        return _VISHNU.ProgressOptions_setMachineId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(ProgressOptions self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.ProgressOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(ProgressOptions self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.ProgressOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(ProgressOptions self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.ProgressOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(ProgressOptions self, ::ecore::EInt _featureID)"""
        return _VISHNU.ProgressOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(ProgressOptions self) -> ::ecore::EClass_ptr"""
        return _VISHNU.ProgressOptions__eClass(self, *args, **kwargs)

ProgressOptions_swigregister = _VISHNU.ProgressOptions_swigregister
ProgressOptions_swigregister(ProgressOptions)

class Progression(EObject):
    """Proxy of C++ TMS_Data::Progression class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Progression, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Progression, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(TMS_Data::Progression self) -> Progression"""
        this = _VISHNU.new_Progression(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_Progression
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(Progression self)"""
        return _VISHNU.Progression__initialize(self, *args, **kwargs)

    def getJobId(self, *args, **kwargs):
        """getJobId(Progression self) -> ::ecore::EString const &"""
        return _VISHNU.Progression_getJobId(self, *args, **kwargs)

    def setJobId(self, *args, **kwargs):
        """setJobId(Progression self, ::ecore::EString const & _jobId)"""
        return _VISHNU.Progression_setJobId(self, *args, **kwargs)

    def getJobName(self, *args, **kwargs):
        """getJobName(Progression self) -> ::ecore::EString const &"""
        return _VISHNU.Progression_getJobName(self, *args, **kwargs)

    def setJobName(self, *args, **kwargs):
        """setJobName(Progression self, ::ecore::EString const & _jobName)"""
        return _VISHNU.Progression_setJobName(self, *args, **kwargs)

    def getWallTime(self, *args, **kwargs):
        """getWallTime(Progression self) -> ::ecore::EInt"""
        return _VISHNU.Progression_getWallTime(self, *args, **kwargs)

    def setWallTime(self, *args, **kwargs):
        """setWallTime(Progression self, ::ecore::EInt _wallTime)"""
        return _VISHNU.Progression_setWallTime(self, *args, **kwargs)

    def getStartTime(self, *args, **kwargs):
        """getStartTime(Progression self) -> ::ecore::ELong"""
        return _VISHNU.Progression_getStartTime(self, *args, **kwargs)

    def setStartTime(self, *args, **kwargs):
        """setStartTime(Progression self, ::ecore::ELong _startTime)"""
        return _VISHNU.Progression_setStartTime(self, *args, **kwargs)

    def getEndTime(self, *args, **kwargs):
        """getEndTime(Progression self) -> ::ecore::ELong"""
        return _VISHNU.Progression_getEndTime(self, *args, **kwargs)

    def setEndTime(self, *args, **kwargs):
        """setEndTime(Progression self, ::ecore::ELong _endTime)"""
        return _VISHNU.Progression_setEndTime(self, *args, **kwargs)

    def getPercent(self, *args, **kwargs):
        """getPercent(Progression self) -> ::ecore::EInt"""
        return _VISHNU.Progression_getPercent(self, *args, **kwargs)

    def setPercent(self, *args, **kwargs):
        """setPercent(Progression self, ::ecore::EInt _percent)"""
        return _VISHNU.Progression_setPercent(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(Progression self) -> ::TMS_Data::JobStatus"""
        return _VISHNU.Progression_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(Progression self, ::TMS_Data::JobStatus _status)"""
        return _VISHNU.Progression_setStatus(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(Progression self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.Progression_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(Progression self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.Progression_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(Progression self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.Progression_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(Progression self, ::ecore::EInt _featureID)"""
        return _VISHNU.Progression_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(Progression self) -> ::ecore::EClass_ptr"""
        return _VISHNU.Progression__eClass(self, *args, **kwargs)

Progression_swigregister = _VISHNU.Progression_swigregister
Progression_swigregister(Progression)

class Queue(EObject):
    """Proxy of C++ TMS_Data::Queue class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Queue, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Queue, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(TMS_Data::Queue self) -> Queue"""
        this = _VISHNU.new_Queue(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_Queue
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(Queue self)"""
        return _VISHNU.Queue__initialize(self, *args, **kwargs)

    def getName(self, *args, **kwargs):
        """getName(Queue self) -> ::ecore::EString const &"""
        return _VISHNU.Queue_getName(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        """setName(Queue self, ::ecore::EString const & _name)"""
        return _VISHNU.Queue_setName(self, *args, **kwargs)

    def getMaxJobCpu(self, *args, **kwargs):
        """getMaxJobCpu(Queue self) -> ::ecore::EInt"""
        return _VISHNU.Queue_getMaxJobCpu(self, *args, **kwargs)

    def setMaxJobCpu(self, *args, **kwargs):
        """setMaxJobCpu(Queue self, ::ecore::EInt _maxJobCpu)"""
        return _VISHNU.Queue_setMaxJobCpu(self, *args, **kwargs)

    def getMaxProcCpu(self, *args, **kwargs):
        """getMaxProcCpu(Queue self) -> ::ecore::EInt"""
        return _VISHNU.Queue_getMaxProcCpu(self, *args, **kwargs)

    def setMaxProcCpu(self, *args, **kwargs):
        """setMaxProcCpu(Queue self, ::ecore::EInt _maxProcCpu)"""
        return _VISHNU.Queue_setMaxProcCpu(self, *args, **kwargs)

    def getMemory(self, *args, **kwargs):
        """getMemory(Queue self) -> ::ecore::EInt"""
        return _VISHNU.Queue_getMemory(self, *args, **kwargs)

    def setMemory(self, *args, **kwargs):
        """setMemory(Queue self, ::ecore::EInt _memory)"""
        return _VISHNU.Queue_setMemory(self, *args, **kwargs)

    def getWallTime(self, *args, **kwargs):
        """getWallTime(Queue self) -> ::ecore::ELong"""
        return _VISHNU.Queue_getWallTime(self, *args, **kwargs)

    def setWallTime(self, *args, **kwargs):
        """setWallTime(Queue self, ::ecore::ELong _wallTime)"""
        return _VISHNU.Queue_setWallTime(self, *args, **kwargs)

    def getNode(self, *args, **kwargs):
        """getNode(Queue self) -> ::ecore::EInt"""
        return _VISHNU.Queue_getNode(self, *args, **kwargs)

    def setNode(self, *args, **kwargs):
        """setNode(Queue self, ::ecore::EInt _node)"""
        return _VISHNU.Queue_setNode(self, *args, **kwargs)

    def getNbRunningJobs(self, *args, **kwargs):
        """getNbRunningJobs(Queue self) -> ::ecore::EInt"""
        return _VISHNU.Queue_getNbRunningJobs(self, *args, **kwargs)

    def setNbRunningJobs(self, *args, **kwargs):
        """setNbRunningJobs(Queue self, ::ecore::EInt _nbRunningJobs)"""
        return _VISHNU.Queue_setNbRunningJobs(self, *args, **kwargs)

    def getNbJobsInQueue(self, *args, **kwargs):
        """getNbJobsInQueue(Queue self) -> ::ecore::EInt"""
        return _VISHNU.Queue_getNbJobsInQueue(self, *args, **kwargs)

    def setNbJobsInQueue(self, *args, **kwargs):
        """setNbJobsInQueue(Queue self, ::ecore::EInt _nbJobsInQueue)"""
        return _VISHNU.Queue_setNbJobsInQueue(self, *args, **kwargs)

    def getState(self, *args, **kwargs):
        """getState(Queue self) -> ::TMS_Data::QueueStatus"""
        return _VISHNU.Queue_getState(self, *args, **kwargs)

    def setState(self, *args, **kwargs):
        """setState(Queue self, ::TMS_Data::QueueStatus _state)"""
        return _VISHNU.Queue_setState(self, *args, **kwargs)

    def getPriority(self, *args, **kwargs):
        """getPriority(Queue self) -> ::TMS_Data::QueuePriority"""
        return _VISHNU.Queue_getPriority(self, *args, **kwargs)

    def setPriority(self, *args, **kwargs):
        """setPriority(Queue self, ::TMS_Data::QueuePriority _priority)"""
        return _VISHNU.Queue_setPriority(self, *args, **kwargs)

    def getDescription(self, *args, **kwargs):
        """getDescription(Queue self) -> ::ecore::EString const &"""
        return _VISHNU.Queue_getDescription(self, *args, **kwargs)

    def setDescription(self, *args, **kwargs):
        """setDescription(Queue self, ::ecore::EString const & _description)"""
        return _VISHNU.Queue_setDescription(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(Queue self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.Queue_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(Queue self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.Queue_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(Queue self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.Queue_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(Queue self, ::ecore::EInt _featureID)"""
        return _VISHNU.Queue_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(Queue self) -> ::ecore::EClass_ptr"""
        return _VISHNU.Queue__eClass(self, *args, **kwargs)

Queue_swigregister = _VISHNU.Queue_swigregister
Queue_swigregister(Queue)

class SubmitOptions(EObject):
    """Proxy of C++ TMS_Data::SubmitOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubmitOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubmitOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(TMS_Data::SubmitOptions self) -> SubmitOptions"""
        this = _VISHNU.new_SubmitOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_SubmitOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(SubmitOptions self)"""
        return _VISHNU.SubmitOptions__initialize(self, *args, **kwargs)

    def getName(self, *args, **kwargs):
        """getName(SubmitOptions self) -> ::ecore::EString const &"""
        return _VISHNU.SubmitOptions_getName(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        """setName(SubmitOptions self, ::ecore::EString const & _name)"""
        return _VISHNU.SubmitOptions_setName(self, *args, **kwargs)

    def getQueue(self, *args, **kwargs):
        """getQueue(SubmitOptions self) -> ::ecore::EString const &"""
        return _VISHNU.SubmitOptions_getQueue(self, *args, **kwargs)

    def setQueue(self, *args, **kwargs):
        """setQueue(SubmitOptions self, ::ecore::EString const & _queue)"""
        return _VISHNU.SubmitOptions_setQueue(self, *args, **kwargs)

    def getWallTime(self, *args, **kwargs):
        """getWallTime(SubmitOptions self) -> ::ecore::EInt"""
        return _VISHNU.SubmitOptions_getWallTime(self, *args, **kwargs)

    def setWallTime(self, *args, **kwargs):
        """setWallTime(SubmitOptions self, ::ecore::EInt _wallTime)"""
        return _VISHNU.SubmitOptions_setWallTime(self, *args, **kwargs)

    def getMemory(self, *args, **kwargs):
        """getMemory(SubmitOptions self) -> ::ecore::EInt"""
        return _VISHNU.SubmitOptions_getMemory(self, *args, **kwargs)

    def setMemory(self, *args, **kwargs):
        """setMemory(SubmitOptions self, ::ecore::EInt _memory)"""
        return _VISHNU.SubmitOptions_setMemory(self, *args, **kwargs)

    def getNbCpu(self, *args, **kwargs):
        """getNbCpu(SubmitOptions self) -> ::ecore::EInt"""
        return _VISHNU.SubmitOptions_getNbCpu(self, *args, **kwargs)

    def setNbCpu(self, *args, **kwargs):
        """setNbCpu(SubmitOptions self, ::ecore::EInt _nbCpu)"""
        return _VISHNU.SubmitOptions_setNbCpu(self, *args, **kwargs)

    def getNbNodesAndCpuPerNode(self, *args, **kwargs):
        """getNbNodesAndCpuPerNode(SubmitOptions self) -> ::ecore::EString const &"""
        return _VISHNU.SubmitOptions_getNbNodesAndCpuPerNode(self, *args, **kwargs)

    def setNbNodesAndCpuPerNode(self, *args, **kwargs):
        """setNbNodesAndCpuPerNode(SubmitOptions self, ::ecore::EString const & _nbNodesAndCpuPerNode)"""
        return _VISHNU.SubmitOptions_setNbNodesAndCpuPerNode(self, *args, **kwargs)

    def getOutputPath(self, *args, **kwargs):
        """getOutputPath(SubmitOptions self) -> ::ecore::EString const &"""
        return _VISHNU.SubmitOptions_getOutputPath(self, *args, **kwargs)

    def setOutputPath(self, *args, **kwargs):
        """setOutputPath(SubmitOptions self, ::ecore::EString const & _outputPath)"""
        return _VISHNU.SubmitOptions_setOutputPath(self, *args, **kwargs)

    def getErrorPath(self, *args, **kwargs):
        """getErrorPath(SubmitOptions self) -> ::ecore::EString const &"""
        return _VISHNU.SubmitOptions_getErrorPath(self, *args, **kwargs)

    def setErrorPath(self, *args, **kwargs):
        """setErrorPath(SubmitOptions self, ::ecore::EString const & _errorPath)"""
        return _VISHNU.SubmitOptions_setErrorPath(self, *args, **kwargs)

    def getMailNotification(self, *args, **kwargs):
        """getMailNotification(SubmitOptions self) -> ::ecore::EString const &"""
        return _VISHNU.SubmitOptions_getMailNotification(self, *args, **kwargs)

    def setMailNotification(self, *args, **kwargs):
        """setMailNotification(SubmitOptions self, ::ecore::EString const & _mailNotification)"""
        return _VISHNU.SubmitOptions_setMailNotification(self, *args, **kwargs)

    def getMailNotifyUser(self, *args, **kwargs):
        """getMailNotifyUser(SubmitOptions self) -> ::ecore::EString const &"""
        return _VISHNU.SubmitOptions_getMailNotifyUser(self, *args, **kwargs)

    def setMailNotifyUser(self, *args, **kwargs):
        """setMailNotifyUser(SubmitOptions self, ::ecore::EString const & _mailNotifyUser)"""
        return _VISHNU.SubmitOptions_setMailNotifyUser(self, *args, **kwargs)

    def getGroup(self, *args, **kwargs):
        """getGroup(SubmitOptions self) -> ::ecore::EString const &"""
        return _VISHNU.SubmitOptions_getGroup(self, *args, **kwargs)

    def setGroup(self, *args, **kwargs):
        """setGroup(SubmitOptions self, ::ecore::EString const & _group)"""
        return _VISHNU.SubmitOptions_setGroup(self, *args, **kwargs)

    def getWorkingDir(self, *args, **kwargs):
        """getWorkingDir(SubmitOptions self) -> ::ecore::EString const &"""
        return _VISHNU.SubmitOptions_getWorkingDir(self, *args, **kwargs)

    def setWorkingDir(self, *args, **kwargs):
        """setWorkingDir(SubmitOptions self, ::ecore::EString const & _workingDir)"""
        return _VISHNU.SubmitOptions_setWorkingDir(self, *args, **kwargs)

    def getCpuTime(self, *args, **kwargs):
        """getCpuTime(SubmitOptions self) -> ::ecore::EString const &"""
        return _VISHNU.SubmitOptions_getCpuTime(self, *args, **kwargs)

    def setCpuTime(self, *args, **kwargs):
        """setCpuTime(SubmitOptions self, ::ecore::EString const & _cpuTime)"""
        return _VISHNU.SubmitOptions_setCpuTime(self, *args, **kwargs)

    def isSelectQueueAutom(self, *args, **kwargs):
        """isSelectQueueAutom(SubmitOptions self) -> ::ecore::EBoolean"""
        return _VISHNU.SubmitOptions_isSelectQueueAutom(self, *args, **kwargs)

    def setSelectQueueAutom(self, *args, **kwargs):
        """setSelectQueueAutom(SubmitOptions self, ::ecore::EBoolean _selectQueueAutom)"""
        return _VISHNU.SubmitOptions_setSelectQueueAutom(self, *args, **kwargs)

    def getFileParams(self, *args, **kwargs):
        """getFileParams(SubmitOptions self) -> ::ecore::EString const &"""
        return _VISHNU.SubmitOptions_getFileParams(self, *args, **kwargs)

    def setFileParams(self, *args, **kwargs):
        """setFileParams(SubmitOptions self, ::ecore::EString const & _fileParams)"""
        return _VISHNU.SubmitOptions_setFileParams(self, *args, **kwargs)

    def getTextParams(self, *args, **kwargs):
        """getTextParams(SubmitOptions self) -> ::ecore::EString const &"""
        return _VISHNU.SubmitOptions_getTextParams(self, *args, **kwargs)

    def setTextParams(self, *args, **kwargs):
        """setTextParams(SubmitOptions self, ::ecore::EString const & _textParams)"""
        return _VISHNU.SubmitOptions_setTextParams(self, *args, **kwargs)

    def getWorkId(self, *args, **kwargs):
        """getWorkId(SubmitOptions self) -> ::ecore::ELong"""
        return _VISHNU.SubmitOptions_getWorkId(self, *args, **kwargs)

    def setWorkId(self, *args, **kwargs):
        """setWorkId(SubmitOptions self, ::ecore::ELong _workId)"""
        return _VISHNU.SubmitOptions_setWorkId(self, *args, **kwargs)

    def getSpecificParams(self, *args, **kwargs):
        """getSpecificParams(SubmitOptions self) -> ::ecore::EString const &"""
        return _VISHNU.SubmitOptions_getSpecificParams(self, *args, **kwargs)

    def setSpecificParams(self, *args, **kwargs):
        """setSpecificParams(SubmitOptions self, ::ecore::EString const & _specificParams)"""
        return _VISHNU.SubmitOptions_setSpecificParams(self, *args, **kwargs)

    def isPosix(self, *args, **kwargs):
        """isPosix(SubmitOptions self) -> ::ecore::EBoolean"""
        return _VISHNU.SubmitOptions_isPosix(self, *args, **kwargs)

    def setPosix(self, *args, **kwargs):
        """setPosix(SubmitOptions self, ::ecore::EBoolean _posix)"""
        return _VISHNU.SubmitOptions_setPosix(self, *args, **kwargs)

    def getMachine(self, *args, **kwargs):
        """getMachine(SubmitOptions self) -> ::ecore::EString const &"""
        return _VISHNU.SubmitOptions_getMachine(self, *args, **kwargs)

    def setMachine(self, *args, **kwargs):
        """setMachine(SubmitOptions self, ::ecore::EString const & _machine)"""
        return _VISHNU.SubmitOptions_setMachine(self, *args, **kwargs)

    def getCriterion(self, *args, **kwargs):
        """getCriterion(SubmitOptions self) -> LoadCriterion"""
        return _VISHNU.SubmitOptions_getCriterion(self, *args, **kwargs)

    def setCriterion(self, *args, **kwargs):
        """setCriterion(SubmitOptions self, LoadCriterion _criterion)"""
        return _VISHNU.SubmitOptions_setCriterion(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(SubmitOptions self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.SubmitOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(SubmitOptions self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.SubmitOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(SubmitOptions self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.SubmitOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(SubmitOptions self, ::ecore::EInt _featureID)"""
        return _VISHNU.SubmitOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(SubmitOptions self) -> ::ecore::EClass_ptr"""
        return _VISHNU.SubmitOptions__eClass(self, *args, **kwargs)

SubmitOptions_swigregister = _VISHNU.SubmitOptions_swigregister
SubmitOptions_swigregister(SubmitOptions)

class LoadCriterion(EObject):
    """Proxy of C++ TMS_Data::LoadCriterion class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoadCriterion, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LoadCriterion, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(TMS_Data::LoadCriterion self) -> LoadCriterion"""
        this = _VISHNU.new_LoadCriterion(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_LoadCriterion
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(LoadCriterion self)"""
        return _VISHNU.LoadCriterion__initialize(self, *args, **kwargs)

    def getLoadType(self, *args, **kwargs):
        """getLoadType(LoadCriterion self) -> ::TMS_Data::LoadType"""
        return _VISHNU.LoadCriterion_getLoadType(self, *args, **kwargs)

    def setLoadType(self, *args, **kwargs):
        """setLoadType(LoadCriterion self, ::TMS_Data::LoadType _loadType)"""
        return _VISHNU.LoadCriterion_setLoadType(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(LoadCriterion self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.LoadCriterion_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(LoadCriterion self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.LoadCriterion_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(LoadCriterion self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.LoadCriterion_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(LoadCriterion self, ::ecore::EInt _featureID)"""
        return _VISHNU.LoadCriterion_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(LoadCriterion self) -> ::ecore::EClass_ptr"""
        return _VISHNU.LoadCriterion__eClass(self, *args, **kwargs)

LoadCriterion_swigregister = _VISHNU.LoadCriterion_swigregister
LoadCriterion_swigregister(LoadCriterion)

class Work(EObject):
    """Proxy of C++ TMS_Data::Work class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Work, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Work, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(TMS_Data::Work self) -> Work"""
        this = _VISHNU.new_Work(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_Work
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(Work self)"""
        return _VISHNU.Work__initialize(self, *args, **kwargs)

    def getSessionId(self, *args, **kwargs):
        """getSessionId(Work self) -> ::ecore::EString const &"""
        return _VISHNU.Work_getSessionId(self, *args, **kwargs)

    def setSessionId(self, *args, **kwargs):
        """setSessionId(Work self, ::ecore::EString const & _sessionId)"""
        return _VISHNU.Work_setSessionId(self, *args, **kwargs)

    def getApplicationId(self, *args, **kwargs):
        """getApplicationId(Work self) -> ::ecore::EString const &"""
        return _VISHNU.Work_getApplicationId(self, *args, **kwargs)

    def setApplicationId(self, *args, **kwargs):
        """setApplicationId(Work self, ::ecore::EString const & _applicationId)"""
        return _VISHNU.Work_setApplicationId(self, *args, **kwargs)

    def getSubject(self, *args, **kwargs):
        """getSubject(Work self) -> ::ecore::EString const &"""
        return _VISHNU.Work_getSubject(self, *args, **kwargs)

    def setSubject(self, *args, **kwargs):
        """setSubject(Work self, ::ecore::EString const & _subject)"""
        return _VISHNU.Work_setSubject(self, *args, **kwargs)

    def getPriority(self, *args, **kwargs):
        """getPriority(Work self) -> ::ecore::EInt"""
        return _VISHNU.Work_getPriority(self, *args, **kwargs)

    def setPriority(self, *args, **kwargs):
        """setPriority(Work self, ::ecore::EInt _priority)"""
        return _VISHNU.Work_setPriority(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(Work self) -> ::ecore::EInt"""
        return _VISHNU.Work_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(Work self, ::ecore::EInt _status)"""
        return _VISHNU.Work_setStatus(self, *args, **kwargs)

    def getEndDate(self, *args, **kwargs):
        """getEndDate(Work self) -> ::ecore::ELong"""
        return _VISHNU.Work_getEndDate(self, *args, **kwargs)

    def setEndDate(self, *args, **kwargs):
        """setEndDate(Work self, ::ecore::ELong _endDate)"""
        return _VISHNU.Work_setEndDate(self, *args, **kwargs)

    def getOwner(self, *args, **kwargs):
        """getOwner(Work self) -> ::ecore::EString const &"""
        return _VISHNU.Work_getOwner(self, *args, **kwargs)

    def setOwner(self, *args, **kwargs):
        """setOwner(Work self, ::ecore::EString const & _owner)"""
        return _VISHNU.Work_setOwner(self, *args, **kwargs)

    def getEstimatedHour(self, *args, **kwargs):
        """getEstimatedHour(Work self) -> ::ecore::ELong"""
        return _VISHNU.Work_getEstimatedHour(self, *args, **kwargs)

    def setEstimatedHour(self, *args, **kwargs):
        """setEstimatedHour(Work self, ::ecore::ELong _estimatedHour)"""
        return _VISHNU.Work_setEstimatedHour(self, *args, **kwargs)

    def getDoneRatio(self, *args, **kwargs):
        """getDoneRatio(Work self) -> ::ecore::EInt"""
        return _VISHNU.Work_getDoneRatio(self, *args, **kwargs)

    def setDoneRatio(self, *args, **kwargs):
        """setDoneRatio(Work self, ::ecore::EInt _doneRatio)"""
        return _VISHNU.Work_setDoneRatio(self, *args, **kwargs)

    def getDescription(self, *args, **kwargs):
        """getDescription(Work self) -> ::ecore::EString const &"""
        return _VISHNU.Work_getDescription(self, *args, **kwargs)

    def setDescription(self, *args, **kwargs):
        """setDescription(Work self, ::ecore::EString const & _description)"""
        return _VISHNU.Work_setDescription(self, *args, **kwargs)

    def getDateCreated(self, *args, **kwargs):
        """getDateCreated(Work self) -> ::ecore::ELong"""
        return _VISHNU.Work_getDateCreated(self, *args, **kwargs)

    def setDateCreated(self, *args, **kwargs):
        """setDateCreated(Work self, ::ecore::ELong _dateCreated)"""
        return _VISHNU.Work_setDateCreated(self, *args, **kwargs)

    def getDateEnded(self, *args, **kwargs):
        """getDateEnded(Work self) -> ::ecore::ELong"""
        return _VISHNU.Work_getDateEnded(self, *args, **kwargs)

    def setDateEnded(self, *args, **kwargs):
        """setDateEnded(Work self, ::ecore::ELong _dateEnded)"""
        return _VISHNU.Work_setDateEnded(self, *args, **kwargs)

    def getDateStarted(self, *args, **kwargs):
        """getDateStarted(Work self) -> ::ecore::ELong"""
        return _VISHNU.Work_getDateStarted(self, *args, **kwargs)

    def setDateStarted(self, *args, **kwargs):
        """setDateStarted(Work self, ::ecore::ELong _dateStarted)"""
        return _VISHNU.Work_setDateStarted(self, *args, **kwargs)

    def getLastUpdated(self, *args, **kwargs):
        """getLastUpdated(Work self) -> ::ecore::ELong"""
        return _VISHNU.Work_getLastUpdated(self, *args, **kwargs)

    def setLastUpdated(self, *args, **kwargs):
        """setLastUpdated(Work self, ::ecore::ELong _lastUpdated)"""
        return _VISHNU.Work_setLastUpdated(self, *args, **kwargs)

    def getWorkId(self, *args, **kwargs):
        """getWorkId(Work self) -> ::ecore::EString const &"""
        return _VISHNU.Work_getWorkId(self, *args, **kwargs)

    def setWorkId(self, *args, **kwargs):
        """setWorkId(Work self, ::ecore::EString const & _workId)"""
        return _VISHNU.Work_setWorkId(self, *args, **kwargs)

    def getProjectId(self, *args, **kwargs):
        """getProjectId(Work self) -> ::ecore::EString const &"""
        return _VISHNU.Work_getProjectId(self, *args, **kwargs)

    def setProjectId(self, *args, **kwargs):
        """setProjectId(Work self, ::ecore::EString const & _projectId)"""
        return _VISHNU.Work_setProjectId(self, *args, **kwargs)

    def getSubmitDate(self, *args, **kwargs):
        """getSubmitDate(Work self) -> ::ecore::ELong"""
        return _VISHNU.Work_getSubmitDate(self, *args, **kwargs)

    def setSubmitDate(self, *args, **kwargs):
        """setSubmitDate(Work self, ::ecore::ELong _submitDate)"""
        return _VISHNU.Work_setSubmitDate(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(Work self) -> ::ecore::EString const &"""
        return _VISHNU.Work_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(Work self, ::ecore::EString const & _machineId)"""
        return _VISHNU.Work_setMachineId(self, *args, **kwargs)

    def getNbCPU(self, *args, **kwargs):
        """getNbCPU(Work self) -> ::ecore::EInt"""
        return _VISHNU.Work_getNbCPU(self, *args, **kwargs)

    def setNbCPU(self, *args, **kwargs):
        """setNbCPU(Work self, ::ecore::EInt _nbCPU)"""
        return _VISHNU.Work_setNbCPU(self, *args, **kwargs)

    def getDueDate(self, *args, **kwargs):
        """getDueDate(Work self) -> ::ecore::ELong"""
        return _VISHNU.Work_getDueDate(self, *args, **kwargs)

    def setDueDate(self, *args, **kwargs):
        """setDueDate(Work self, ::ecore::ELong _dueDate)"""
        return _VISHNU.Work_setDueDate(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(Work self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.Work_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(Work self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.Work_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(Work self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.Work_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(Work self, ::ecore::EInt _featureID)"""
        return _VISHNU.Work_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(Work self) -> ::ecore::EClass_ptr"""
        return _VISHNU.Work__eClass(self, *args, **kwargs)

Work_swigregister = _VISHNU.Work_swigregister
Work_swigregister(Work)

class AddWorkOptions(EObject):
    """Proxy of C++ TMS_Data::AddWorkOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AddWorkOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AddWorkOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(TMS_Data::AddWorkOptions self) -> AddWorkOptions"""
        this = _VISHNU.new_AddWorkOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_AddWorkOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(AddWorkOptions self)"""
        return _VISHNU.AddWorkOptions__initialize(self, *args, **kwargs)

    def getApplicationId(self, *args, **kwargs):
        """getApplicationId(AddWorkOptions self) -> ::ecore::EString const &"""
        return _VISHNU.AddWorkOptions_getApplicationId(self, *args, **kwargs)

    def setApplicationId(self, *args, **kwargs):
        """setApplicationId(AddWorkOptions self, ::ecore::EString const & _applicationId)"""
        return _VISHNU.AddWorkOptions_setApplicationId(self, *args, **kwargs)

    def getSubject(self, *args, **kwargs):
        """getSubject(AddWorkOptions self) -> ::ecore::EString const &"""
        return _VISHNU.AddWorkOptions_getSubject(self, *args, **kwargs)

    def setSubject(self, *args, **kwargs):
        """setSubject(AddWorkOptions self, ::ecore::EString const & _subject)"""
        return _VISHNU.AddWorkOptions_setSubject(self, *args, **kwargs)

    def getPriority(self, *args, **kwargs):
        """getPriority(AddWorkOptions self) -> ::ecore::EInt"""
        return _VISHNU.AddWorkOptions_getPriority(self, *args, **kwargs)

    def setPriority(self, *args, **kwargs):
        """setPriority(AddWorkOptions self, ::ecore::EInt _priority)"""
        return _VISHNU.AddWorkOptions_setPriority(self, *args, **kwargs)

    def getOwner(self, *args, **kwargs):
        """getOwner(AddWorkOptions self) -> ::ecore::EString const &"""
        return _VISHNU.AddWorkOptions_getOwner(self, *args, **kwargs)

    def setOwner(self, *args, **kwargs):
        """setOwner(AddWorkOptions self, ::ecore::EString const & _owner)"""
        return _VISHNU.AddWorkOptions_setOwner(self, *args, **kwargs)

    def getEstimatedHour(self, *args, **kwargs):
        """getEstimatedHour(AddWorkOptions self) -> ::ecore::ELong"""
        return _VISHNU.AddWorkOptions_getEstimatedHour(self, *args, **kwargs)

    def setEstimatedHour(self, *args, **kwargs):
        """setEstimatedHour(AddWorkOptions self, ::ecore::ELong _estimatedHour)"""
        return _VISHNU.AddWorkOptions_setEstimatedHour(self, *args, **kwargs)

    def getDescription(self, *args, **kwargs):
        """getDescription(AddWorkOptions self) -> ::ecore::EString const &"""
        return _VISHNU.AddWorkOptions_getDescription(self, *args, **kwargs)

    def setDescription(self, *args, **kwargs):
        """setDescription(AddWorkOptions self, ::ecore::EString const & _description)"""
        return _VISHNU.AddWorkOptions_setDescription(self, *args, **kwargs)

    def getProjectId(self, *args, **kwargs):
        """getProjectId(AddWorkOptions self) -> ::ecore::EString const &"""
        return _VISHNU.AddWorkOptions_getProjectId(self, *args, **kwargs)

    def setProjectId(self, *args, **kwargs):
        """setProjectId(AddWorkOptions self, ::ecore::EString const & _projectId)"""
        return _VISHNU.AddWorkOptions_setProjectId(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(AddWorkOptions self) -> ::ecore::EString const &"""
        return _VISHNU.AddWorkOptions_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(AddWorkOptions self, ::ecore::EString const & _machineId)"""
        return _VISHNU.AddWorkOptions_setMachineId(self, *args, **kwargs)

    def getNbCPU(self, *args, **kwargs):
        """getNbCPU(AddWorkOptions self) -> ::ecore::EInt"""
        return _VISHNU.AddWorkOptions_getNbCPU(self, *args, **kwargs)

    def setNbCPU(self, *args, **kwargs):
        """setNbCPU(AddWorkOptions self, ::ecore::EInt _nbCPU)"""
        return _VISHNU.AddWorkOptions_setNbCPU(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(AddWorkOptions self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.AddWorkOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(AddWorkOptions self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.AddWorkOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(AddWorkOptions self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.AddWorkOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(AddWorkOptions self, ::ecore::EInt _featureID)"""
        return _VISHNU.AddWorkOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(AddWorkOptions self) -> ::ecore::EClass_ptr"""
        return _VISHNU.AddWorkOptions__eClass(self, *args, **kwargs)

AddWorkOptions_swigregister = _VISHNU.AddWorkOptions_swigregister
AddWorkOptions_swigregister(AddWorkOptions)

class CancelOptions(EObject):
    """Proxy of C++ TMS_Data::CancelOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CancelOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CancelOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> CancelOptions"""
        this = _VISHNU.new_CancelOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_CancelOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(self)"""
        return _VISHNU.CancelOptions__initialize(self, *args, **kwargs)

    def getMachineId(self, *args, **kwargs):
        """getMachineId(self) -> EString"""
        return _VISHNU.CancelOptions_getMachineId(self, *args, **kwargs)

    def setMachineId(self, *args, **kwargs):
        """setMachineId(self, EString _machineId)"""
        return _VISHNU.CancelOptions_setMachineId(self, *args, **kwargs)

    def getUser(self, *args, **kwargs):
        """getUser(self) -> EString"""
        return _VISHNU.CancelOptions_getUser(self, *args, **kwargs)

    def setUser(self, *args, **kwargs):
        """setUser(self, EString _user)"""
        return _VISHNU.CancelOptions_setUser(self, *args, **kwargs)

    def getJobId(self, *args, **kwargs):
        """getJobId(self) -> EString"""
        return _VISHNU.CancelOptions_getJobId(self, *args, **kwargs)

    def setJobId(self, *args, **kwargs):
        """setJobId(self, EString _jobId)"""
        return _VISHNU.CancelOptions_setJobId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(self, EInt _featureID, EBoolean _resolve) -> EJavaObject"""
        return _VISHNU.CancelOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(self, EInt _featureID, EJavaObject _newValue)"""
        return _VISHNU.CancelOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(self, EInt _featureID) -> EBoolean"""
        return _VISHNU.CancelOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(self, EInt _featureID)"""
        return _VISHNU.CancelOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(self) -> EClass_ptr"""
        return _VISHNU.CancelOptions__eClass(self, *args, **kwargs)

CancelOptions_swigregister = _VISHNU.CancelOptions_swigregister
CancelOptions_swigregister(CancelOptions)

class CpFileOptions(EObject):
    """Proxy of C++ FMS_Data::CpFileOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpFileOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpFileOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(FMS_Data::CpFileOptions self) -> CpFileOptions"""
        this = _VISHNU.new_CpFileOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_CpFileOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(CpFileOptions self)"""
        return _VISHNU.CpFileOptions__initialize(self, *args, **kwargs)

    def isIsRecursive(self, *args, **kwargs):
        """isIsRecursive(CpFileOptions self) -> ::ecore::EBoolean"""
        return _VISHNU.CpFileOptions_isIsRecursive(self, *args, **kwargs)

    def setIsRecursive(self, *args, **kwargs):
        """setIsRecursive(CpFileOptions self, ::ecore::EBoolean _isRecursive)"""
        return _VISHNU.CpFileOptions_setIsRecursive(self, *args, **kwargs)

    def getTrCommand(self, *args, **kwargs):
        """getTrCommand(CpFileOptions self) -> ::FMS_Data::TransferCommand"""
        return _VISHNU.CpFileOptions_getTrCommand(self, *args, **kwargs)

    def setTrCommand(self, *args, **kwargs):
        """setTrCommand(CpFileOptions self, ::FMS_Data::TransferCommand _trCommand)"""
        return _VISHNU.CpFileOptions_setTrCommand(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(CpFileOptions self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.CpFileOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(CpFileOptions self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.CpFileOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(CpFileOptions self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.CpFileOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(CpFileOptions self, ::ecore::EInt _featureID)"""
        return _VISHNU.CpFileOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(CpFileOptions self) -> ::ecore::EClass_ptr"""
        return _VISHNU.CpFileOptions__eClass(self, *args, **kwargs)

CpFileOptions_swigregister = _VISHNU.CpFileOptions_swigregister
CpFileOptions_swigregister(CpFileOptions)

class FileStat(EObject):
    """Proxy of C++ FMS_Data::FileStat class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileStat, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileStat, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(FMS_Data::FileStat self) -> FileStat"""
        this = _VISHNU.new_FileStat(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_FileStat
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(FileStat self)"""
        return _VISHNU.FileStat__initialize(self, *args, **kwargs)

    def getPath(self, *args, **kwargs):
        """getPath(FileStat self) -> ::ecore::EString const &"""
        return _VISHNU.FileStat_getPath(self, *args, **kwargs)

    def setPath(self, *args, **kwargs):
        """setPath(FileStat self, ::ecore::EString const & _path)"""
        return _VISHNU.FileStat_setPath(self, *args, **kwargs)

    def getOwner(self, *args, **kwargs):
        """getOwner(FileStat self) -> ::ecore::EString const &"""
        return _VISHNU.FileStat_getOwner(self, *args, **kwargs)

    def setOwner(self, *args, **kwargs):
        """setOwner(FileStat self, ::ecore::EString const & _owner)"""
        return _VISHNU.FileStat_setOwner(self, *args, **kwargs)

    def getGroup(self, *args, **kwargs):
        """getGroup(FileStat self) -> ::ecore::EString const &"""
        return _VISHNU.FileStat_getGroup(self, *args, **kwargs)

    def setGroup(self, *args, **kwargs):
        """setGroup(FileStat self, ::ecore::EString const & _group)"""
        return _VISHNU.FileStat_setGroup(self, *args, **kwargs)

    def getPerms(self, *args, **kwargs):
        """getPerms(FileStat self) -> ::ecore::EInt"""
        return _VISHNU.FileStat_getPerms(self, *args, **kwargs)

    def setPerms(self, *args, **kwargs):
        """setPerms(FileStat self, ::ecore::EInt _perms)"""
        return _VISHNU.FileStat_setPerms(self, *args, **kwargs)

    def getUid(self, *args, **kwargs):
        """getUid(FileStat self) -> ::ecore::ELong"""
        return _VISHNU.FileStat_getUid(self, *args, **kwargs)

    def setUid(self, *args, **kwargs):
        """setUid(FileStat self, ::ecore::ELong _uid)"""
        return _VISHNU.FileStat_setUid(self, *args, **kwargs)

    def getGid(self, *args, **kwargs):
        """getGid(FileStat self) -> ::ecore::ELong"""
        return _VISHNU.FileStat_getGid(self, *args, **kwargs)

    def setGid(self, *args, **kwargs):
        """setGid(FileStat self, ::ecore::ELong _gid)"""
        return _VISHNU.FileStat_setGid(self, *args, **kwargs)

    def getSize(self, *args, **kwargs):
        """getSize(FileStat self) -> ::ecore::EBigInteger"""
        return _VISHNU.FileStat_getSize(self, *args, **kwargs)

    def setSize(self, *args, **kwargs):
        """setSize(FileStat self, ::ecore::EBigInteger _size)"""
        return _VISHNU.FileStat_setSize(self, *args, **kwargs)

    def getAtime(self, *args, **kwargs):
        """getAtime(FileStat self) -> ::ecore::ELong"""
        return _VISHNU.FileStat_getAtime(self, *args, **kwargs)

    def setAtime(self, *args, **kwargs):
        """setAtime(FileStat self, ::ecore::ELong _atime)"""
        return _VISHNU.FileStat_setAtime(self, *args, **kwargs)

    def getMtime(self, *args, **kwargs):
        """getMtime(FileStat self) -> ::ecore::ELong"""
        return _VISHNU.FileStat_getMtime(self, *args, **kwargs)

    def setMtime(self, *args, **kwargs):
        """setMtime(FileStat self, ::ecore::ELong _mtime)"""
        return _VISHNU.FileStat_setMtime(self, *args, **kwargs)

    def getCtime(self, *args, **kwargs):
        """getCtime(FileStat self) -> ::ecore::ELong"""
        return _VISHNU.FileStat_getCtime(self, *args, **kwargs)

    def setCtime(self, *args, **kwargs):
        """setCtime(FileStat self, ::ecore::ELong _ctime)"""
        return _VISHNU.FileStat_setCtime(self, *args, **kwargs)

    def getType(self, *args, **kwargs):
        """getType(FileStat self) -> ::FMS_Data::FileType"""
        return _VISHNU.FileStat_getType(self, *args, **kwargs)

    def setType(self, *args, **kwargs):
        """setType(FileStat self, ::FMS_Data::FileType _type)"""
        return _VISHNU.FileStat_setType(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(FileStat self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.FileStat_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(FileStat self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.FileStat_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(FileStat self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.FileStat_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(FileStat self, ::ecore::EInt _featureID)"""
        return _VISHNU.FileStat_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(FileStat self) -> ::ecore::EClass_ptr"""
        return _VISHNU.FileStat__eClass(self, *args, **kwargs)

FileStat_swigregister = _VISHNU.FileStat_swigregister
FileStat_swigregister(FileStat)

class FileTransfer(EObject):
    """Proxy of C++ FMS_Data::FileTransfer class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileTransfer, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileTransfer, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(FMS_Data::FileTransfer self) -> FileTransfer"""
        this = _VISHNU.new_FileTransfer(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_FileTransfer
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(FileTransfer self)"""
        return _VISHNU.FileTransfer__initialize(self, *args, **kwargs)

    def getTransferId(self, *args, **kwargs):
        """getTransferId(FileTransfer self) -> ::ecore::EString const &"""
        return _VISHNU.FileTransfer_getTransferId(self, *args, **kwargs)

    def setTransferId(self, *args, **kwargs):
        """setTransferId(FileTransfer self, ::ecore::EString const & _transferId)"""
        return _VISHNU.FileTransfer_setTransferId(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(FileTransfer self) -> ::FMS_Data::Status"""
        return _VISHNU.FileTransfer_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(FileTransfer self, ::FMS_Data::Status _status)"""
        return _VISHNU.FileTransfer_setStatus(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(FileTransfer self) -> ::ecore::EString const &"""
        return _VISHNU.FileTransfer_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(FileTransfer self, ::ecore::EString const & _userId)"""
        return _VISHNU.FileTransfer_setUserId(self, *args, **kwargs)

    def getClientMachineId(self, *args, **kwargs):
        """getClientMachineId(FileTransfer self) -> ::ecore::EString const &"""
        return _VISHNU.FileTransfer_getClientMachineId(self, *args, **kwargs)

    def setClientMachineId(self, *args, **kwargs):
        """setClientMachineId(FileTransfer self, ::ecore::EString const & _clientMachineId)"""
        return _VISHNU.FileTransfer_setClientMachineId(self, *args, **kwargs)

    def getSourceMachineId(self, *args, **kwargs):
        """getSourceMachineId(FileTransfer self) -> ::ecore::EString const &"""
        return _VISHNU.FileTransfer_getSourceMachineId(self, *args, **kwargs)

    def setSourceMachineId(self, *args, **kwargs):
        """setSourceMachineId(FileTransfer self, ::ecore::EString const & _sourceMachineId)"""
        return _VISHNU.FileTransfer_setSourceMachineId(self, *args, **kwargs)

    def getDestinationMachineId(self, *args, **kwargs):
        """getDestinationMachineId(FileTransfer self) -> ::ecore::EString const &"""
        return _VISHNU.FileTransfer_getDestinationMachineId(self, *args, **kwargs)

    def setDestinationMachineId(self, *args, **kwargs):
        """setDestinationMachineId(FileTransfer self, ::ecore::EString const & _destinationMachineId)"""
        return _VISHNU.FileTransfer_setDestinationMachineId(self, *args, **kwargs)

    def getSourceFilePath(self, *args, **kwargs):
        """getSourceFilePath(FileTransfer self) -> ::ecore::EString const &"""
        return _VISHNU.FileTransfer_getSourceFilePath(self, *args, **kwargs)

    def setSourceFilePath(self, *args, **kwargs):
        """setSourceFilePath(FileTransfer self, ::ecore::EString const & _sourceFilePath)"""
        return _VISHNU.FileTransfer_setSourceFilePath(self, *args, **kwargs)

    def getDestinationFilePath(self, *args, **kwargs):
        """getDestinationFilePath(FileTransfer self) -> ::ecore::EString const &"""
        return _VISHNU.FileTransfer_getDestinationFilePath(self, *args, **kwargs)

    def setDestinationFilePath(self, *args, **kwargs):
        """setDestinationFilePath(FileTransfer self, ::ecore::EString const & _destinationFilePath)"""
        return _VISHNU.FileTransfer_setDestinationFilePath(self, *args, **kwargs)

    def getSize(self, *args, **kwargs):
        """getSize(FileTransfer self) -> ::ecore::EBigInteger"""
        return _VISHNU.FileTransfer_getSize(self, *args, **kwargs)

    def setSize(self, *args, **kwargs):
        """setSize(FileTransfer self, ::ecore::EBigInteger _size)"""
        return _VISHNU.FileTransfer_setSize(self, *args, **kwargs)

    def getStartTime(self, *args, **kwargs):
        """getStartTime(FileTransfer self) -> ::ecore::ELong"""
        return _VISHNU.FileTransfer_getStartTime(self, *args, **kwargs)

    def setStartTime(self, *args, **kwargs):
        """setStartTime(FileTransfer self, ::ecore::ELong _startTime)"""
        return _VISHNU.FileTransfer_setStartTime(self, *args, **kwargs)

    def getTrCommand(self, *args, **kwargs):
        """getTrCommand(FileTransfer self) -> ::FMS_Data::TransferCommand"""
        return _VISHNU.FileTransfer_getTrCommand(self, *args, **kwargs)

    def setTrCommand(self, *args, **kwargs):
        """setTrCommand(FileTransfer self, ::FMS_Data::TransferCommand _trCommand)"""
        return _VISHNU.FileTransfer_setTrCommand(self, *args, **kwargs)

    def getErrorMsg(self, *args, **kwargs):
        """getErrorMsg(FileTransfer self) -> ::ecore::EString const &"""
        return _VISHNU.FileTransfer_getErrorMsg(self, *args, **kwargs)

    def setErrorMsg(self, *args, **kwargs):
        """setErrorMsg(FileTransfer self, ::ecore::EString const & _errorMsg)"""
        return _VISHNU.FileTransfer_setErrorMsg(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(FileTransfer self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.FileTransfer_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(FileTransfer self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.FileTransfer_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(FileTransfer self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.FileTransfer_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(FileTransfer self, ::ecore::EInt _featureID)"""
        return _VISHNU.FileTransfer_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(FileTransfer self) -> ::ecore::EClass_ptr"""
        return _VISHNU.FileTransfer__eClass(self, *args, **kwargs)

FileTransfer_swigregister = _VISHNU.FileTransfer_swigregister
FileTransfer_swigregister(FileTransfer)

class HeadOfFileOptions(EObject):
    """Proxy of C++ FMS_Data::HeadOfFileOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeadOfFileOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HeadOfFileOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(FMS_Data::HeadOfFileOptions self) -> HeadOfFileOptions"""
        this = _VISHNU.new_HeadOfFileOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_HeadOfFileOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(HeadOfFileOptions self)"""
        return _VISHNU.HeadOfFileOptions__initialize(self, *args, **kwargs)

    def getNline(self, *args, **kwargs):
        """getNline(HeadOfFileOptions self) -> ::ecore::EInt"""
        return _VISHNU.HeadOfFileOptions_getNline(self, *args, **kwargs)

    def setNline(self, *args, **kwargs):
        """setNline(HeadOfFileOptions self, ::ecore::EInt _nline)"""
        return _VISHNU.HeadOfFileOptions_setNline(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(HeadOfFileOptions self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.HeadOfFileOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(HeadOfFileOptions self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.HeadOfFileOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(HeadOfFileOptions self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.HeadOfFileOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(HeadOfFileOptions self, ::ecore::EInt _featureID)"""
        return _VISHNU.HeadOfFileOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(HeadOfFileOptions self) -> ::ecore::EClass_ptr"""
        return _VISHNU.HeadOfFileOptions__eClass(self, *args, **kwargs)

HeadOfFileOptions_swigregister = _VISHNU.HeadOfFileOptions_swigregister
HeadOfFileOptions_swigregister(HeadOfFileOptions)

class LsDirOptions(EObject):
    """Proxy of C++ FMS_Data::LsDirOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LsDirOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LsDirOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(FMS_Data::LsDirOptions self) -> LsDirOptions"""
        this = _VISHNU.new_LsDirOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_LsDirOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(LsDirOptions self)"""
        return _VISHNU.LsDirOptions__initialize(self, *args, **kwargs)

    def isLongFormat(self, *args, **kwargs):
        """isLongFormat(LsDirOptions self) -> ::ecore::EBoolean"""
        return _VISHNU.LsDirOptions_isLongFormat(self, *args, **kwargs)

    def setLongFormat(self, *args, **kwargs):
        """setLongFormat(LsDirOptions self, ::ecore::EBoolean _longFormat)"""
        return _VISHNU.LsDirOptions_setLongFormat(self, *args, **kwargs)

    def isAllFiles(self, *args, **kwargs):
        """isAllFiles(LsDirOptions self) -> ::ecore::EBoolean"""
        return _VISHNU.LsDirOptions_isAllFiles(self, *args, **kwargs)

    def setAllFiles(self, *args, **kwargs):
        """setAllFiles(LsDirOptions self, ::ecore::EBoolean _allFiles)"""
        return _VISHNU.LsDirOptions_setAllFiles(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(LsDirOptions self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.LsDirOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(LsDirOptions self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.LsDirOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(LsDirOptions self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.LsDirOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(LsDirOptions self, ::ecore::EInt _featureID)"""
        return _VISHNU.LsDirOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(LsDirOptions self) -> ::ecore::EClass_ptr"""
        return _VISHNU.LsDirOptions__eClass(self, *args, **kwargs)

LsDirOptions_swigregister = _VISHNU.LsDirOptions_swigregister
LsDirOptions_swigregister(LsDirOptions)

class LsTransferOptions(EObject):
    """Proxy of C++ FMS_Data::LsTransferOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LsTransferOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LsTransferOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(FMS_Data::LsTransferOptions self) -> LsTransferOptions"""
        this = _VISHNU.new_LsTransferOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_LsTransferOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(LsTransferOptions self)"""
        return _VISHNU.LsTransferOptions__initialize(self, *args, **kwargs)

    def getTransferId(self, *args, **kwargs):
        """getTransferId(LsTransferOptions self) -> ::ecore::EString const &"""
        return _VISHNU.LsTransferOptions_getTransferId(self, *args, **kwargs)

    def setTransferId(self, *args, **kwargs):
        """setTransferId(LsTransferOptions self, ::ecore::EString const & _transferId)"""
        return _VISHNU.LsTransferOptions_setTransferId(self, *args, **kwargs)

    def getFromMachineId(self, *args, **kwargs):
        """getFromMachineId(LsTransferOptions self) -> ::ecore::EString const &"""
        return _VISHNU.LsTransferOptions_getFromMachineId(self, *args, **kwargs)

    def setFromMachineId(self, *args, **kwargs):
        """setFromMachineId(LsTransferOptions self, ::ecore::EString const & _fromMachineId)"""
        return _VISHNU.LsTransferOptions_setFromMachineId(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(LsTransferOptions self) -> ::ecore::EString const &"""
        return _VISHNU.LsTransferOptions_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(LsTransferOptions self, ::ecore::EString const & _userId)"""
        return _VISHNU.LsTransferOptions_setUserId(self, *args, **kwargs)

    def getStatus(self, *args, **kwargs):
        """getStatus(LsTransferOptions self) -> ::FMS_Data::Status"""
        return _VISHNU.LsTransferOptions_getStatus(self, *args, **kwargs)

    def setStatus(self, *args, **kwargs):
        """setStatus(LsTransferOptions self, ::FMS_Data::Status _status)"""
        return _VISHNU.LsTransferOptions_setStatus(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(LsTransferOptions self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.LsTransferOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(LsTransferOptions self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.LsTransferOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(LsTransferOptions self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.LsTransferOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(LsTransferOptions self, ::ecore::EInt _featureID)"""
        return _VISHNU.LsTransferOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(LsTransferOptions self) -> ::ecore::EClass_ptr"""
        return _VISHNU.LsTransferOptions__eClass(self, *args, **kwargs)

LsTransferOptions_swigregister = _VISHNU.LsTransferOptions_swigregister
LsTransferOptions_swigregister(LsTransferOptions)

class StopTransferOptions(EObject):
    """Proxy of C++ FMS_Data::StopTransferOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StopTransferOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StopTransferOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(FMS_Data::StopTransferOptions self) -> StopTransferOptions"""
        this = _VISHNU.new_StopTransferOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_StopTransferOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(StopTransferOptions self)"""
        return _VISHNU.StopTransferOptions__initialize(self, *args, **kwargs)

    def getTransferId(self, *args, **kwargs):
        """getTransferId(StopTransferOptions self) -> ::ecore::EString const &"""
        return _VISHNU.StopTransferOptions_getTransferId(self, *args, **kwargs)

    def setTransferId(self, *args, **kwargs):
        """setTransferId(StopTransferOptions self, ::ecore::EString const & _transferId)"""
        return _VISHNU.StopTransferOptions_setTransferId(self, *args, **kwargs)

    def getFromMachineId(self, *args, **kwargs):
        """getFromMachineId(StopTransferOptions self) -> ::ecore::EString const &"""
        return _VISHNU.StopTransferOptions_getFromMachineId(self, *args, **kwargs)

    def setFromMachineId(self, *args, **kwargs):
        """setFromMachineId(StopTransferOptions self, ::ecore::EString const & _fromMachineId)"""
        return _VISHNU.StopTransferOptions_setFromMachineId(self, *args, **kwargs)

    def getUserId(self, *args, **kwargs):
        """getUserId(StopTransferOptions self) -> ::ecore::EString const &"""
        return _VISHNU.StopTransferOptions_getUserId(self, *args, **kwargs)

    def setUserId(self, *args, **kwargs):
        """setUserId(StopTransferOptions self, ::ecore::EString const & _userId)"""
        return _VISHNU.StopTransferOptions_setUserId(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(StopTransferOptions self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.StopTransferOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(StopTransferOptions self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.StopTransferOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(StopTransferOptions self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.StopTransferOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(StopTransferOptions self, ::ecore::EInt _featureID)"""
        return _VISHNU.StopTransferOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(StopTransferOptions self) -> ::ecore::EClass_ptr"""
        return _VISHNU.StopTransferOptions__eClass(self, *args, **kwargs)

StopTransferOptions_swigregister = _VISHNU.StopTransferOptions_swigregister
StopTransferOptions_swigregister(StopTransferOptions)

class TailOfFileOptions(EObject):
    """Proxy of C++ FMS_Data::TailOfFileOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TailOfFileOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TailOfFileOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(FMS_Data::TailOfFileOptions self) -> TailOfFileOptions"""
        this = _VISHNU.new_TailOfFileOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_TailOfFileOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(TailOfFileOptions self)"""
        return _VISHNU.TailOfFileOptions__initialize(self, *args, **kwargs)

    def getNline(self, *args, **kwargs):
        """getNline(TailOfFileOptions self) -> ::ecore::EInt"""
        return _VISHNU.TailOfFileOptions_getNline(self, *args, **kwargs)

    def setNline(self, *args, **kwargs):
        """setNline(TailOfFileOptions self, ::ecore::EInt _nline)"""
        return _VISHNU.TailOfFileOptions_setNline(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(TailOfFileOptions self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.TailOfFileOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(TailOfFileOptions self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.TailOfFileOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(TailOfFileOptions self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.TailOfFileOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(TailOfFileOptions self, ::ecore::EInt _featureID)"""
        return _VISHNU.TailOfFileOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(TailOfFileOptions self) -> ::ecore::EClass_ptr"""
        return _VISHNU.TailOfFileOptions__eClass(self, *args, **kwargs)

TailOfFileOptions_swigregister = _VISHNU.TailOfFileOptions_swigregister
TailOfFileOptions_swigregister(TailOfFileOptions)

class RmFileOptions(EObject):
    """Proxy of C++ FMS_Data::RmFileOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RmFileOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RmFileOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(FMS_Data::RmFileOptions self) -> RmFileOptions"""
        this = _VISHNU.new_RmFileOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_RmFileOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(RmFileOptions self)"""
        return _VISHNU.RmFileOptions__initialize(self, *args, **kwargs)

    def isIsRecursive(self, *args, **kwargs):
        """isIsRecursive(RmFileOptions self) -> ::ecore::EBoolean"""
        return _VISHNU.RmFileOptions_isIsRecursive(self, *args, **kwargs)

    def setIsRecursive(self, *args, **kwargs):
        """setIsRecursive(RmFileOptions self, ::ecore::EBoolean _isRecursive)"""
        return _VISHNU.RmFileOptions_setIsRecursive(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(RmFileOptions self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.RmFileOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(RmFileOptions self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.RmFileOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(RmFileOptions self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.RmFileOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(RmFileOptions self, ::ecore::EInt _featureID)"""
        return _VISHNU.RmFileOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(RmFileOptions self) -> ::ecore::EClass_ptr"""
        return _VISHNU.RmFileOptions__eClass(self, *args, **kwargs)

RmFileOptions_swigregister = _VISHNU.RmFileOptions_swigregister
RmFileOptions_swigregister(RmFileOptions)

class CreateDirOptions(EObject):
    """Proxy of C++ FMS_Data::CreateDirOptions class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateDirOptions, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CreateDirOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(FMS_Data::CreateDirOptions self) -> CreateDirOptions"""
        this = _VISHNU.new_CreateDirOptions(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_CreateDirOptions
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(CreateDirOptions self)"""
        return _VISHNU.CreateDirOptions__initialize(self, *args, **kwargs)

    def isIsRecursive(self, *args, **kwargs):
        """isIsRecursive(CreateDirOptions self) -> ::ecore::EBoolean"""
        return _VISHNU.CreateDirOptions_isIsRecursive(self, *args, **kwargs)

    def setIsRecursive(self, *args, **kwargs):
        """setIsRecursive(CreateDirOptions self, ::ecore::EBoolean _isRecursive)"""
        return _VISHNU.CreateDirOptions_setIsRecursive(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(CreateDirOptions self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.CreateDirOptions_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(CreateDirOptions self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.CreateDirOptions_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(CreateDirOptions self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.CreateDirOptions_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(CreateDirOptions self, ::ecore::EInt _featureID)"""
        return _VISHNU.CreateDirOptions_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(CreateDirOptions self) -> ::ecore::EClass_ptr"""
        return _VISHNU.CreateDirOptions__eClass(self, *args, **kwargs)

CreateDirOptions_swigregister = _VISHNU.CreateDirOptions_swigregister
CreateDirOptions_swigregister(CreateDirOptions)

class DirEntry(EObject):
    """Proxy of C++ FMS_Data::DirEntry class"""
    __swig_setmethods__ = {}
    for _s in [EObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirEntry, name, value)
    __swig_getmethods__ = {}
    for _s in [EObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DirEntry, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(FMS_Data::DirEntry self) -> DirEntry"""
        this = _VISHNU.new_DirEntry(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_DirEntry
    __del__ = lambda self : None;
    def _initialize(self, *args, **kwargs):
        """_initialize(DirEntry self)"""
        return _VISHNU.DirEntry__initialize(self, *args, **kwargs)

    def getPath(self, *args, **kwargs):
        """getPath(DirEntry self) -> ::ecore::EString const &"""
        return _VISHNU.DirEntry_getPath(self, *args, **kwargs)

    def setPath(self, *args, **kwargs):
        """setPath(DirEntry self, ::ecore::EString const & _path)"""
        return _VISHNU.DirEntry_setPath(self, *args, **kwargs)

    def getOwner(self, *args, **kwargs):
        """getOwner(DirEntry self) -> ::ecore::EString const &"""
        return _VISHNU.DirEntry_getOwner(self, *args, **kwargs)

    def setOwner(self, *args, **kwargs):
        """setOwner(DirEntry self, ::ecore::EString const & _owner)"""
        return _VISHNU.DirEntry_setOwner(self, *args, **kwargs)

    def getGroup(self, *args, **kwargs):
        """getGroup(DirEntry self) -> ::ecore::EString const &"""
        return _VISHNU.DirEntry_getGroup(self, *args, **kwargs)

    def setGroup(self, *args, **kwargs):
        """setGroup(DirEntry self, ::ecore::EString const & _group)"""
        return _VISHNU.DirEntry_setGroup(self, *args, **kwargs)

    def getPerms(self, *args, **kwargs):
        """getPerms(DirEntry self) -> ::ecore::EInt"""
        return _VISHNU.DirEntry_getPerms(self, *args, **kwargs)

    def setPerms(self, *args, **kwargs):
        """setPerms(DirEntry self, ::ecore::EInt _perms)"""
        return _VISHNU.DirEntry_setPerms(self, *args, **kwargs)

    def getSize(self, *args, **kwargs):
        """getSize(DirEntry self) -> ::ecore::EBigInteger"""
        return _VISHNU.DirEntry_getSize(self, *args, **kwargs)

    def setSize(self, *args, **kwargs):
        """setSize(DirEntry self, ::ecore::EBigInteger _size)"""
        return _VISHNU.DirEntry_setSize(self, *args, **kwargs)

    def getCtime(self, *args, **kwargs):
        """getCtime(DirEntry self) -> ::ecore::EString const &"""
        return _VISHNU.DirEntry_getCtime(self, *args, **kwargs)

    def setCtime(self, *args, **kwargs):
        """setCtime(DirEntry self, ::ecore::EString const & _ctime)"""
        return _VISHNU.DirEntry_setCtime(self, *args, **kwargs)

    def getType(self, *args, **kwargs):
        """getType(DirEntry self) -> ::FMS_Data::FileType"""
        return _VISHNU.DirEntry_getType(self, *args, **kwargs)

    def setType(self, *args, **kwargs):
        """setType(DirEntry self, ::FMS_Data::FileType _type)"""
        return _VISHNU.DirEntry_setType(self, *args, **kwargs)

    def eGet(self, *args, **kwargs):
        """eGet(DirEntry self, ::ecore::EInt _featureID, ::ecore::EBoolean _resolve) -> ::ecore::EJavaObject"""
        return _VISHNU.DirEntry_eGet(self, *args, **kwargs)

    def eSet(self, *args, **kwargs):
        """eSet(DirEntry self, ::ecore::EInt _featureID, ::ecore::EJavaObject const & _newValue)"""
        return _VISHNU.DirEntry_eSet(self, *args, **kwargs)

    def eIsSet(self, *args, **kwargs):
        """eIsSet(DirEntry self, ::ecore::EInt _featureID) -> ::ecore::EBoolean"""
        return _VISHNU.DirEntry_eIsSet(self, *args, **kwargs)

    def eUnset(self, *args, **kwargs):
        """eUnset(DirEntry self, ::ecore::EInt _featureID)"""
        return _VISHNU.DirEntry_eUnset(self, *args, **kwargs)

    def _eClass(self, *args, **kwargs):
        """_eClass(DirEntry self) -> ::ecore::EClass_ptr"""
        return _VISHNU.DirEntry__eClass(self, *args, **kwargs)

DirEntry_swigregister = _VISHNU.DirEntry_swigregister
DirEntry_swigregister(DirEntry)

class map_string_string(_object):
    """Proxy of C++ std::map<(std::string,std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_string, name)
    __repr__ = _swig_repr
    def iterator(self, *args, **kwargs):
        """iterator(map_string_string self) -> SwigPyIterator"""
        return _VISHNU.map_string_string_iterator(self, *args, **kwargs)

    def __iter__(self): return self.iterator()
    def __nonzero__(self, *args, **kwargs):
        """__nonzero__(map_string_string self) -> bool"""
        return _VISHNU.map_string_string___nonzero__(self, *args, **kwargs)

    def __bool__(self, *args, **kwargs):
        """__bool__(map_string_string self) -> bool"""
        return _VISHNU.map_string_string___bool__(self, *args, **kwargs)

    def __len__(self, *args, **kwargs):
        """__len__(map_string_string self) -> std::map< std::string,std::string >::size_type"""
        return _VISHNU.map_string_string___len__(self, *args, **kwargs)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args, **kwargs):
        """__getitem__(map_string_string self, std::map< std::string,std::string >::key_type const & key) -> std::map< std::string,std::string >::mapped_type const &"""
        return _VISHNU.map_string_string___getitem__(self, *args, **kwargs)

    def __delitem__(self, *args, **kwargs):
        """__delitem__(map_string_string self, std::map< std::string,std::string >::key_type const & key)"""
        return _VISHNU.map_string_string___delitem__(self, *args, **kwargs)

    def has_key(self, *args, **kwargs):
        """has_key(map_string_string self, std::map< std::string,std::string >::key_type const & key) -> bool"""
        return _VISHNU.map_string_string_has_key(self, *args, **kwargs)

    def keys(self, *args, **kwargs):
        """keys(map_string_string self) -> PyObject *"""
        return _VISHNU.map_string_string_keys(self, *args, **kwargs)

    def values(self, *args, **kwargs):
        """values(map_string_string self) -> PyObject *"""
        return _VISHNU.map_string_string_values(self, *args, **kwargs)

    def items(self, *args, **kwargs):
        """items(map_string_string self) -> PyObject *"""
        return _VISHNU.map_string_string_items(self, *args, **kwargs)

    def __contains__(self, *args, **kwargs):
        """__contains__(map_string_string self, std::map< std::string,std::string >::key_type const & key) -> bool"""
        return _VISHNU.map_string_string___contains__(self, *args, **kwargs)

    def key_iterator(self, *args, **kwargs):
        """key_iterator(map_string_string self) -> SwigPyIterator"""
        return _VISHNU.map_string_string_key_iterator(self, *args, **kwargs)

    def value_iterator(self, *args, **kwargs):
        """value_iterator(map_string_string self) -> SwigPyIterator"""
        return _VISHNU.map_string_string_value_iterator(self, *args, **kwargs)

    def __setitem__(self, *args):
        """
        __setitem__(map_string_string self, std::map< std::string,std::string >::key_type const & key)
        __setitem__(map_string_string self, std::map< std::string,std::string >::key_type const & key, std::map< std::string,std::string >::mapped_type const & x)
        """
        return _VISHNU.map_string_string___setitem__(self, *args)

    def asdict(self, *args, **kwargs):
        """asdict(map_string_string self) -> PyObject *"""
        return _VISHNU.map_string_string_asdict(self, *args, **kwargs)

    def __init__(self, *args): 
        """
        __init__(std::map<(std::string,std::string)> self, std::less< std::string > const & arg2) -> map_string_string
        __init__(std::map<(std::string,std::string)> self) -> map_string_string
        __init__(std::map<(std::string,std::string)> self, map_string_string arg2) -> map_string_string
        """
        this = _VISHNU.new_map_string_string(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self, *args, **kwargs):
        """empty(map_string_string self) -> bool"""
        return _VISHNU.map_string_string_empty(self, *args, **kwargs)

    def size(self, *args, **kwargs):
        """size(map_string_string self) -> std::map< std::string,std::string >::size_type"""
        return _VISHNU.map_string_string_size(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        """clear(map_string_string self)"""
        return _VISHNU.map_string_string_clear(self, *args, **kwargs)

    def swap(self, *args, **kwargs):
        """swap(map_string_string self, map_string_string v)"""
        return _VISHNU.map_string_string_swap(self, *args, **kwargs)

    def get_allocator(self, *args, **kwargs):
        """get_allocator(map_string_string self) -> std::map< std::string,std::string >::allocator_type"""
        return _VISHNU.map_string_string_get_allocator(self, *args, **kwargs)

    def begin(self, *args, **kwargs):
        """begin(map_string_string self) -> std::map< std::string,std::string >::iterator"""
        return _VISHNU.map_string_string_begin(self, *args, **kwargs)

    def end(self, *args, **kwargs):
        """end(map_string_string self) -> std::map< std::string,std::string >::iterator"""
        return _VISHNU.map_string_string_end(self, *args, **kwargs)

    def rbegin(self, *args, **kwargs):
        """rbegin(map_string_string self) -> std::map< std::string,std::string >::reverse_iterator"""
        return _VISHNU.map_string_string_rbegin(self, *args, **kwargs)

    def rend(self, *args, **kwargs):
        """rend(map_string_string self) -> std::map< std::string,std::string >::reverse_iterator"""
        return _VISHNU.map_string_string_rend(self, *args, **kwargs)

    def count(self, *args, **kwargs):
        """count(map_string_string self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::size_type"""
        return _VISHNU.map_string_string_count(self, *args, **kwargs)

    def erase(self, *args):
        """
        erase(map_string_string self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::size_type
        erase(map_string_string self, std::map< std::string,std::string >::iterator position)
        erase(map_string_string self, std::map< std::string,std::string >::iterator first, std::map< std::string,std::string >::iterator last)
        """
        return _VISHNU.map_string_string_erase(self, *args)

    def find(self, *args, **kwargs):
        """find(map_string_string self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator"""
        return _VISHNU.map_string_string_find(self, *args, **kwargs)

    def lower_bound(self, *args, **kwargs):
        """lower_bound(map_string_string self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator"""
        return _VISHNU.map_string_string_lower_bound(self, *args, **kwargs)

    def upper_bound(self, *args, **kwargs):
        """upper_bound(map_string_string self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator"""
        return _VISHNU.map_string_string_upper_bound(self, *args, **kwargs)

    __swig_destroy__ = _VISHNU.delete_map_string_string
    __del__ = lambda self : None;
map_string_string_swigregister = _VISHNU.map_string_string_swigregister
map_string_string_swigregister(map_string_string)


def connect(*args, **kwargs):
  """connect(std::string const & userId, std::string const & password, Session session, ConnectOptions connectOpt=UMS_Data::ConnectOptions()) -> int"""
  return _VISHNU.connect(*args, **kwargs)

def connect_m(*args, **kwargs):
  """connect_m(UMS_Data::ListUsers & users, Session session, ConnectOptions connectOpt=UMS_Data::ConnectOptions()) -> int"""
  return _VISHNU.connect_m(*args, **kwargs)

def reconnect(*args):
  """
    reconnect(std::string const & userId, std::string const & password, std::string const & sessionId, 
        Session session) -> int
    reconnect(UMS_Data::ListUsers & users, std::string const & sessionId, Session session) -> int
    """
  return _VISHNU.reconnect(*args)

def close(*args, **kwargs):
  """close(std::string const & sessionKey) -> int"""
  return _VISHNU.close(*args, **kwargs)

def addUser(*args, **kwargs):
  """addUser(std::string const & sessionKey, User newUser) -> int"""
  return _VISHNU.addUser(*args, **kwargs)

def updateUser(*args, **kwargs):
  """updateUser(std::string const & sessionKey, User user) -> int"""
  return _VISHNU.updateUser(*args, **kwargs)

def deleteUser(*args, **kwargs):
  """deleteUser(std::string const & sessionKey, std::string const & userId) -> int"""
  return _VISHNU.deleteUser(*args, **kwargs)

def changePassword(*args, **kwargs):
  """changePassword(std::string const & userId, std::string const & password, std::string const & passwordNew) -> int"""
  return _VISHNU.changePassword(*args, **kwargs)

def resetPassword(*args, **kwargs):
  """resetPassword(std::string const & sessionKey, std::string const & userId) -> int"""
  return _VISHNU.resetPassword(*args, **kwargs)

def addMachine(*args, **kwargs):
  """addMachine(std::string const & sessionKey, Machine newMachine) -> int"""
  return _VISHNU.addMachine(*args, **kwargs)

def updateMachine(*args, **kwargs):
  """updateMachine(std::string const & sessionKey, Machine machine) -> int"""
  return _VISHNU.updateMachine(*args, **kwargs)

def deleteMachine(*args, **kwargs):
  """deleteMachine(std::string const & sessionKey, std::string const & machineId) -> int"""
  return _VISHNU.deleteMachine(*args, **kwargs)

def addLocalAccount(*args, **kwargs):
  """addLocalAccount(std::string const & sessionKey, LocalAccount newLocalAccount) -> int"""
  return _VISHNU.addLocalAccount(*args, **kwargs)

def updateLocalAccount(*args, **kwargs):
  """updateLocalAccount(std::string const & sessionKey, LocalAccount localAccount) -> int"""
  return _VISHNU.updateLocalAccount(*args, **kwargs)

def deleteLocalAccount(*args, **kwargs):
  """deleteLocalAccount(std::string const & sessionKey, std::string const & userId, std::string const & machineId) -> int"""
  return _VISHNU.deleteLocalAccount(*args, **kwargs)

def configureOption(*args, **kwargs):
  """configureOption(std::string const & sessionKey, OptionValue optionValue) -> int"""
  return _VISHNU.configureOption(*args, **kwargs)

def configureDefaultOption(*args, **kwargs):
  """configureDefaultOption(std::string const & sessionKey, OptionValue optionValue) -> int"""
  return _VISHNU.configureDefaultOption(*args, **kwargs)

def listSessions(*args, **kwargs):
  """listSessions(std::string const & sessionKey, ListSessionOptions options=UMS_Data::ListSessionOptions()) -> int"""
  return _VISHNU.listSessions(*args, **kwargs)

def listLocalAccounts(*args, **kwargs):
  """listLocalAccounts(std::string const & sessionKey, ListLocalAccOptions options=UMS_Data::ListLocalAccOptions()) -> int"""
  return _VISHNU.listLocalAccounts(*args, **kwargs)

def listMachines(*args, **kwargs):
  """listMachines(std::string const & sessionKey, ListMachineOptions options=UMS_Data::ListMachineOptions()) -> int"""
  return _VISHNU.listMachines(*args, **kwargs)

def listHistoryCmd(*args, **kwargs):
  """listHistoryCmd(std::string const & sessionKey, ListCmdOptions options=UMS_Data::ListCmdOptions()) -> int"""
  return _VISHNU.listHistoryCmd(*args, **kwargs)

def listOptions(*args, **kwargs):
  """listOptions(std::string const & sessionKey, ListOptOptions options=UMS_Data::ListOptOptions()) -> int"""
  return _VISHNU.listOptions(*args, **kwargs)

def listUsers(*args, **kwargs):
  """listUsers(std::string const & sessionKey, ListUsersOptions listOptions=UMS_Data::ListUsersOptions()) -> int"""
  return _VISHNU.listUsers(*args, **kwargs)

def addAuthSystem(*args, **kwargs):
  """addAuthSystem(std::string const & sessionKey, AuthSystem newAuthSys) -> int"""
  return _VISHNU.addAuthSystem(*args, **kwargs)

def updateAuthSystem(*args, **kwargs):
  """updateAuthSystem(std::string const & sessionKey, AuthSystem AuthSys) -> int"""
  return _VISHNU.updateAuthSystem(*args, **kwargs)

def deleteAuthSystem(*args, **kwargs):
  """deleteAuthSystem(std::string const & sessionKey, std::string const & authSystemId) -> int"""
  return _VISHNU.deleteAuthSystem(*args, **kwargs)

def listAuthSystems(*args, **kwargs):
  """listAuthSystems(std::string const & sessionKey, ListAuthSysOptions options=UMS_Data::ListAuthSysOptions()) -> int"""
  return _VISHNU.listAuthSystems(*args, **kwargs)

def addAuthAccount(*args, **kwargs):
  """addAuthAccount(std::string const & sessionKey, AuthAccount authAccount) -> int"""
  return _VISHNU.addAuthAccount(*args, **kwargs)

def updateAuthAccount(*args, **kwargs):
  """updateAuthAccount(std::string const & sessionKey, AuthAccount authenAccount) -> int"""
  return _VISHNU.updateAuthAccount(*args, **kwargs)

def deleteAuthAccount(*args, **kwargs):
  """deleteAuthAccount(std::string const & sessionKey, std::string const & authSystemId, std::string const & userIdOption="") -> int"""
  return _VISHNU.deleteAuthAccount(*args, **kwargs)

def listAuthAccounts(*args, **kwargs):
  """listAuthAccounts(std::string const & sessionKey, ListAuthAccOptions options=UMS_Data::ListAuthAccOptions()) -> int"""
  return _VISHNU.listAuthAccounts(*args, **kwargs)

def vishnuInitialize(*args, **kwargs):
  """vishnuInitialize(char * cfg) -> int"""
  return _VISHNU.vishnuInitialize(*args, **kwargs)

def vishnuFinalize(*args):
  """vishnuFinalize()"""
  return _VISHNU.vishnuFinalize(*args)

def defineUserIdentifier(*args, **kwargs):
  """defineUserIdentifier(std::string const & sessionKey, std::string const & fmt) -> int"""
  return _VISHNU.defineUserIdentifier(*args, **kwargs)

def defineMachineIdentifier(*args, **kwargs):
  """defineMachineIdentifier(std::string const & sessionKey, std::string const & fmt) -> int"""
  return _VISHNU.defineMachineIdentifier(*args, **kwargs)

def defineJobIdentifier(*args, **kwargs):
  """defineJobIdentifier(std::string const & sessionKey, std::string const & fmt) -> int"""
  return _VISHNU.defineJobIdentifier(*args, **kwargs)

def defineTransferIdentifier(*args, **kwargs):
  """defineTransferIdentifier(std::string const & sessionKey, std::string const & fmt) -> int"""
  return _VISHNU.defineTransferIdentifier(*args, **kwargs)

def defineAuthIdentifier(*args, **kwargs):
  """defineAuthIdentifier(std::string const & sessionKey, std::string const & fmt) -> int"""
  return _VISHNU.defineAuthIdentifier(*args, **kwargs)

def defineWorkIdentifier(*args, **kwargs):
  """defineWorkIdentifier(std::string const & sessionKey, std::string const & fmt) -> int"""
  return _VISHNU.defineWorkIdentifier(*args, **kwargs)

def exportCommands(*args, **kwargs):
  """exportCommands(std::string const & sessionKey, std::string const & oldSessionId, std::string const & filename) -> int"""
  return _VISHNU.exportCommands(*args, **kwargs)

def ping(*args, **kwargs):
  """ping(std::string const & serverName="", std::string const & mid="") -> int"""
  return _VISHNU.ping(*args, **kwargs)

def getServerVersion(*args, **kwargs):
  """getServerVersion(std::string const & serverName="", std::string const & mid="") -> int"""
  return _VISHNU.getServerVersion(*args, **kwargs)

def listServers(*args, **kwargs):
  """listServers(std::string const & mid="") -> int"""
  return _VISHNU.listServers(*args, **kwargs)
class VishnuException(Exception):
    """Proxy of C++ VishnuException class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VishnuException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VishnuException, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    UMS = _VISHNU.VishnuException_UMS
    TMS = _VISHNU.VishnuException_TMS
    FMS = _VISHNU.VishnuException_FMS
    INTERNAL = _VISHNU.VishnuException_INTERNAL
    NONE = _VISHNU.VishnuException_NONE
    __swig_destroy__ = _VISHNU.delete_VishnuException
    __del__ = lambda self : None;
    def getTypeI(self, *args, **kwargs):
        """getTypeI(VishnuException self) -> VishnuException::ExceptionType"""
        return _VISHNU.VishnuException_getTypeI(self, *args, **kwargs)

    def getTypeS(self, *args, **kwargs):
        """getTypeS(VishnuException self) -> std::string"""
        return _VISHNU.VishnuException_getTypeS(self, *args, **kwargs)

    def what(self, *args, **kwargs):
        """what(VishnuException self) -> char const *"""
        return _VISHNU.VishnuException_what(self, *args, **kwargs)

    def getMsg(self, *args, **kwargs):
        """getMsg(VishnuException self) -> std::string"""
        return _VISHNU.VishnuException_getMsg(self, *args, **kwargs)

    def getMsgComp(self, *args, **kwargs):
        """getMsgComp(VishnuException self) -> std::string"""
        return _VISHNU.VishnuException_getMsgComp(self, *args, **kwargs)

    def setType(self, *args, **kwargs):
        """setType(VishnuException self, VishnuException::ExceptionType t)"""
        return _VISHNU.VishnuException_setType(self, *args, **kwargs)

    def setMsgComp(self, *args, **kwargs):
        """setMsgComp(VishnuException self, std::string m)"""
        return _VISHNU.VishnuException_setMsgComp(self, *args, **kwargs)

    def setMsg(self, *args, **kwargs):
        """setMsg(VishnuException self, int val)"""
        return _VISHNU.VishnuException_setMsg(self, *args, **kwargs)

    def appendMsgComp(self, *args, **kwargs):
        """appendMsgComp(VishnuException self, std::string s)"""
        return _VISHNU.VishnuException_appendMsgComp(self, *args, **kwargs)

    def getMsgI(self, *args, **kwargs):
        """getMsgI(VishnuException self) -> int"""
        return _VISHNU.VishnuException_getMsgI(self, *args, **kwargs)

    def initMsg(self, *args, **kwargs):
        """initMsg(VishnuException self)"""
        return _VISHNU.VishnuException_initMsg(self, *args, **kwargs)

    def buildExceptionString(self, *args, **kwargs):
        """buildExceptionString(VishnuException self) -> std::string"""
        return _VISHNU.VishnuException_buildExceptionString(self, *args, **kwargs)

VishnuException_swigregister = _VISHNU.VishnuException_swigregister
VishnuException_swigregister(VishnuException)
cvar = _VISHNU.cvar
VISHNU_OK = cvar.VISHNU_OK

class UserException(VishnuException):
    """Proxy of C++ UserException class"""
    __swig_setmethods__ = {}
    for _s in [VishnuException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserException, name, value)
    __swig_getmethods__ = {}
    for _s in [VishnuException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(UserException self) -> UserException
        __init__(UserException self, UserException e) -> UserException
        __init__(UserException self, int msg, std::string msgComp="") -> UserException
        """
        this = _VISHNU.new_UserException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_UserException
    __del__ = lambda self : None;
    def getTypeS(self, *args, **kwargs):
        """getTypeS(UserException self) -> std::string"""
        return _VISHNU.UserException_getTypeS(self, *args, **kwargs)

    def getMsg(self, *args, **kwargs):
        """getMsg(UserException self) -> std::string"""
        return _VISHNU.UserException_getMsg(self, *args, **kwargs)

UserException_swigregister = _VISHNU.UserException_swigregister
UserException_swigregister(UserException)
ERRCODE_INVALID_PARAM = cvar.ERRCODE_INVALID_PARAM
ERRCODE_FILENOTFOUND = cvar.ERRCODE_FILENOTFOUND
ERRCODE_CONFIGNOTFOUND = cvar.ERRCODE_CONFIGNOTFOUND
ERRCODE_CLI_ERROR_NO_SESSION = cvar.ERRCODE_CLI_ERROR_NO_SESSION
ERRCODE_CLI_ERROR_MISSING_PARAMETER = cvar.ERRCODE_CLI_ERROR_MISSING_PARAMETER
ERRCODE_CLI_ERROR_COMMUNICATION = cvar.ERRCODE_CLI_ERROR_COMMUNICATION
ERRCODE_CLI_ERROR_RUNTIME = cvar.ERRCODE_CLI_ERROR_RUNTIME

class SystemException(VishnuException):
    """Proxy of C++ SystemException class"""
    __swig_setmethods__ = {}
    for _s in [VishnuException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SystemException, name, value)
    __swig_getmethods__ = {}
    for _s in [VishnuException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SystemException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(SystemException self) -> SystemException
        __init__(SystemException self, SystemException e) -> SystemException
        __init__(SystemException self, int msg, std::string msgComp="") -> SystemException
        """
        this = _VISHNU.new_SystemException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_SystemException
    __del__ = lambda self : None;
    def getMsg(self, *args, **kwargs):
        """getMsg(SystemException self) -> std::string"""
        return _VISHNU.SystemException_getMsg(self, *args, **kwargs)

    def getTypeS(self, *args, **kwargs):
        """getTypeS(SystemException self) -> std::string"""
        return _VISHNU.SystemException_getTypeS(self, *args, **kwargs)

    def initMsg(self, *args, **kwargs):
        """initMsg(SystemException self)"""
        return _VISHNU.SystemException_initMsg(self, *args, **kwargs)

SystemException_swigregister = _VISHNU.SystemException_swigregister
SystemException_swigregister(SystemException)
ERRCODE_AUTHENTERR = cvar.ERRCODE_AUTHENTERR
ERRCODE_COMMUNICATION = cvar.ERRCODE_COMMUNICATION
ERRCODE_DBERR = cvar.ERRCODE_DBERR
ERRCODE_DBCONN = cvar.ERRCODE_DBCONN
ERRCODE_SYSTEM = cvar.ERRCODE_SYSTEM
ERRCODE_INVCOMP = cvar.ERRCODE_INVCOMP
ERRCODE_INVMAPPER = cvar.ERRCODE_INVMAPPER
ERRCODE_INVEXCEP = cvar.ERRCODE_INVEXCEP
ERRCODE_INVDATA = cvar.ERRCODE_INVDATA
ERRCODE_SSH = cvar.ERRCODE_SSH

class UMSVishnuException(UserException):
    """Proxy of C++ UMSVishnuException class"""
    __swig_setmethods__ = {}
    for _s in [UserException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UMSVishnuException, name, value)
    __swig_getmethods__ = {}
    for _s in [UserException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UMSVishnuException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(UMSVishnuException self) -> UMSVishnuException
        __init__(UMSVishnuException self, UMSVishnuException e) -> UMSVishnuException
        __init__(UMSVishnuException self, int msg, std::string msgComp="") -> UMSVishnuException
        """
        this = _VISHNU.new_UMSVishnuException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_UMSVishnuException
    __del__ = lambda self : None;
    def initMsg(self, *args, **kwargs):
        """initMsg(UMSVishnuException self)"""
        return _VISHNU.UMSVishnuException_initMsg(self, *args, **kwargs)

UMSVishnuException_swigregister = _VISHNU.UMSVishnuException_swigregister
UMSVishnuException_swigregister(UMSVishnuException)
ERRCODE_UNKNOWN_USER = cvar.ERRCODE_UNKNOWN_USER
ERRCODE_UNKNOWN_USERID = cvar.ERRCODE_UNKNOWN_USERID
ERRCODE_USERID_EXISTING = cvar.ERRCODE_USERID_EXISTING
ERRCODE_USER_LOCKED = cvar.ERRCODE_USER_LOCKED
ERRCODE_USER_ALREADY_LOCKED = cvar.ERRCODE_USER_ALREADY_LOCKED
ERRCODE_NO_ADMIN = cvar.ERRCODE_NO_ADMIN
ERRCODE_TEMPORARY_PASSWORD = cvar.ERRCODE_TEMPORARY_PASSWORD
ERRCODE_INVALID_MAIL_ADRESS = cvar.ERRCODE_INVALID_MAIL_ADRESS
ERRCODE_SESSIONKEY_NOT_FOUND = cvar.ERRCODE_SESSIONKEY_NOT_FOUND
ERRCODE_SESSIONKEY_EXPIRED = cvar.ERRCODE_SESSIONKEY_EXPIRED
ERRCODE_UNKNOWN_SESSION_ID = cvar.ERRCODE_UNKNOWN_SESSION_ID
ERRCODE_COMMAND_RUNNING = cvar.ERRCODE_COMMAND_RUNNING
ERRCODE_UNKNOWN_MACHINE = cvar.ERRCODE_UNKNOWN_MACHINE
ERRCODE_MACHINE_EXISTING = cvar.ERRCODE_MACHINE_EXISTING
ERRCODE_MACHINE_LOCKED = cvar.ERRCODE_MACHINE_LOCKED
ERRCODE_MACHINE_ALREADY_LOCKED = cvar.ERRCODE_MACHINE_ALREADY_LOCKED
ERRCODE_UNUSABLE_MACHINE = cvar.ERRCODE_UNUSABLE_MACHINE
ERRCODE_LOCAL_ACCOUNT_EXIST = cvar.ERRCODE_LOCAL_ACCOUNT_EXIST
ERRCODE_UNKNOWN_LOCAL_ACCOUNT = cvar.ERRCODE_UNKNOWN_LOCAL_ACCOUNT
ERRCODE_SAVE_CONFIG_ERROR = cvar.ERRCODE_SAVE_CONFIG_ERROR
ERRCODE_RESTORE_CONFIG_ERROR = cvar.ERRCODE_RESTORE_CONFIG_ERROR
ERRCODE_UNKNOWN_OPTION = cvar.ERRCODE_UNKNOWN_OPTION
ERRCODE_UNKNOWN_CLOSURE_MODE = cvar.ERRCODE_UNKNOWN_CLOSURE_MODE
ERRCODE_INCORRECT_TIMEOUT = cvar.ERRCODE_INCORRECT_TIMEOUT
ERRCODE_INCORRECT_TRANSFER_CMD = cvar.ERRCODE_INCORRECT_TRANSFER_CMD
ERRCODE_ROOT_USER_ONLY = cvar.ERRCODE_ROOT_USER_ONLY
ERRCODE_LOGIN_ALREADY_USED = cvar.ERRCODE_LOGIN_ALREADY_USED
ERRCODE_UNKNOWN_AUTH_SYSTEM_TYPE = cvar.ERRCODE_UNKNOWN_AUTH_SYSTEM_TYPE
ERRCODE_UNKNOWN_AUTH_SYSTEM = cvar.ERRCODE_UNKNOWN_AUTH_SYSTEM
ERRCODE_AUTH_SYSTEM_ALREADY_LOCKED = cvar.ERRCODE_AUTH_SYSTEM_ALREADY_LOCKED
ERRCODE_AUTH_SYSTEM_ALREADY_EXIST = cvar.ERRCODE_AUTH_SYSTEM_ALREADY_EXIST
ERRCODE_AUTH_ACCOUNT_EXIST = cvar.ERRCODE_AUTH_ACCOUNT_EXIST
ERRCODE_UNKNOWN_AUTH_ACCOUNT = cvar.ERRCODE_UNKNOWN_AUTH_ACCOUNT
ERRCODE_UNKNOWN_ENCRYPTION_METHOD = cvar.ERRCODE_UNKNOWN_ENCRYPTION_METHOD
ERRCODE_READONLY_ACCOUNT = cvar.ERRCODE_READONLY_ACCOUNT

class TMSVishnuException(UserException):
    """Proxy of C++ TMSVishnuException class"""
    __swig_setmethods__ = {}
    for _s in [UserException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMSVishnuException, name, value)
    __swig_getmethods__ = {}
    for _s in [UserException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TMSVishnuException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(TMSVishnuException self) -> TMSVishnuException
        __init__(TMSVishnuException self, TMSVishnuException e) -> TMSVishnuException
        __init__(TMSVishnuException self, int msg, std::string msgComp="") -> TMSVishnuException
        """
        this = _VISHNU.new_TMSVishnuException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_TMSVishnuException
    __del__ = lambda self : None;
    def initMsg(self, *args, **kwargs):
        """initMsg(TMSVishnuException self)"""
        return _VISHNU.TMSVishnuException_initMsg(self, *args, **kwargs)

TMSVishnuException_swigregister = _VISHNU.TMSVishnuException_swigregister
TMSVishnuException_swigregister(TMSVishnuException)
ERRCODE_UNKNOWN_BATCH_SCHEDULER = cvar.ERRCODE_UNKNOWN_BATCH_SCHEDULER
ERRCODE_BATCH_SCHEDULER_ERROR = cvar.ERRCODE_BATCH_SCHEDULER_ERROR
ERRCODE_UNKNOWN_JOBID = cvar.ERRCODE_UNKNOWN_JOBID
ERRCODE_PERMISSION_DENIED = cvar.ERRCODE_PERMISSION_DENIED
ERRCODE_ALREADY_TERMINATED = cvar.ERRCODE_ALREADY_TERMINATED
ERRCODE_ALREADY_CANCELED = cvar.ERRCODE_ALREADY_CANCELED
ERRCODE_JOB_IS_NOT_TERMINATED = cvar.ERRCODE_JOB_IS_NOT_TERMINATED
ERRCODE_ALREADY_DOWNLOADED = cvar.ERRCODE_ALREADY_DOWNLOADED
ERRCODE_UNKNOWN_WORKID = cvar.ERRCODE_UNKNOWN_WORKID

class FMSVishnuException(UserException):
    """Proxy of C++ FMSVishnuException class"""
    __swig_setmethods__ = {}
    for _s in [UserException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FMSVishnuException, name, value)
    __swig_getmethods__ = {}
    for _s in [UserException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FMSVishnuException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FMSVishnuException self) -> FMSVishnuException
        __init__(FMSVishnuException self, FMSVishnuException e) -> FMSVishnuException
        __init__(FMSVishnuException self, int msg, std::string msgComp="") -> FMSVishnuException
        """
        this = _VISHNU.new_FMSVishnuException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _VISHNU.delete_FMSVishnuException
    __del__ = lambda self : None;
    def initMsg(self, *args, **kwargs):
        """initMsg(FMSVishnuException self)"""
        return _VISHNU.FMSVishnuException_initMsg(self, *args, **kwargs)

FMSVishnuException_swigregister = _VISHNU.FMSVishnuException_swigregister
FMSVishnuException_swigregister(FMSVishnuException)
ERRCODE_INVALID_PATH = cvar.ERRCODE_INVALID_PATH
ERRCODE_RUNTIME_ERROR = cvar.ERRCODE_RUNTIME_ERROR
ERRCODE_UNKNOWN_FILETRANSFERID = cvar.ERRCODE_UNKNOWN_FILETRANSFERID


def submitJob(*args, **kwargs):
  """
    submitJob(std::string const & sessionKey, std::string const & scriptFilePath, Job jobInfo, 
        SubmitOptions options=TMS_Data::SubmitOptions()) -> int
    """
  return _VISHNU.submitJob(*args, **kwargs)

def addWork(*args, **kwargs):
  """addWork(std::string const & sessionKey, Work newWork, AddWorkOptions options=TMS_Data::AddWorkOptions()) -> int"""
  return _VISHNU.addWork(*args, **kwargs)

def cancelJob(*args, **kwargs):
  """cancelJob(std::string const & sessionKey, TMS_Data::CancelOptions const & options) -> int"""
  return _VISHNU.cancelJob(*args, **kwargs)

def getJobInfo(*args, **kwargs):
  """getJobInfo(std::string const & sessionKey, std::string const & jobId, Job jobInfos) -> int"""
  return _VISHNU.getJobInfo(*args, **kwargs)

def listJobs(*args, **kwargs):
  """listJobs(std::string const & sessionKey, ListJobsOptions options=TMS_Data::ListJobsOptions()) -> int"""
  return _VISHNU.listJobs(*args, **kwargs)

def getJobProgress(*args, **kwargs):
  """getJobProgress(std::string const & sessionKey, ProgressOptions options=TMS_Data::ProgressOptions()) -> int"""
  return _VISHNU.getJobProgress(*args, **kwargs)

def listQueues(*args, **kwargs):
  """listQueues(std::string const & sessionKey, std::string const & machineId, std::string const & queueName=std::string()) -> int"""
  return _VISHNU.listQueues(*args, **kwargs)

def getJobOutput(*args, **kwargs):
  """
    getJobOutput(std::string const & sessionKey, std::string const & jobId, JobResult outputInfo, 
        TMS_Data::JobOutputOptions const & options) -> int
    """
  return _VISHNU.getJobOutput(*args, **kwargs)

def getCompletedJobsOutput(*args, **kwargs):
  """getCompletedJobsOutput(std::string const & sessionKey, TMS_Data::JobOutputOptions const & options) -> int"""
  return _VISHNU.getCompletedJobsOutput(*args, **kwargs)

def touch(*args, **kwargs):
  """touch(std::string const & sessionKey, std::string const & path) -> int"""
  return _VISHNU.touch(*args, **kwargs)

def chgrp(*args, **kwargs):
  """chgrp(std::string const & sessionKey, std::string const & group, std::string const & path) -> int"""
  return _VISHNU.chgrp(*args, **kwargs)

def chmod(*args, **kwargs):
  """chmod(std::string const & sessionKey, mode_t const & mode, std::string const & path) -> int"""
  return _VISHNU.chmod(*args, **kwargs)

def cp(*args, **kwargs):
  """
    cp(std::string const & sessionKey, std::string const & src, std::string const & dest, 
        CpFileOptions options=FMS_Data::CpFileOptions()) -> int
    """
  return _VISHNU.cp(*args, **kwargs)

def acp(*args, **kwargs):
  """
    acp(std::string const & sessionKey, std::string const & src, std::string const & dest, 
        FileTransfer transferInfo, CpFileOptions options=FMS_Data::CpFileOptions()) -> int
    """
  return _VISHNU.acp(*args, **kwargs)

def head(*args, **kwargs):
  """head(std::string const & sessionKey, std::string const & path, HeadOfFileOptions options=FMS_Data::HeadOfFileOptions()) -> int"""
  return _VISHNU.head(*args, **kwargs)

def cat(*args, **kwargs):
  """cat(std::string const & sessionKey, std::string const & path) -> int"""
  return _VISHNU.cat(*args, **kwargs)

def ls(*args, **kwargs):
  """ls(std::string const & sessionKey, std::string const & path, LsDirOptions options=FMS_Data::LsDirOptions()) -> int"""
  return _VISHNU.ls(*args, **kwargs)

def mkdir(*args, **kwargs):
  """mkdir(std::string const & sessionKey, std::string const & path, CreateDirOptions options=FMS_Data::CreateDirOptions()) -> int"""
  return _VISHNU.mkdir(*args, **kwargs)

def mv(*args, **kwargs):
  """
    mv(std::string const & sessionKey, std::string const & src, std::string const & dest, 
        CpFileOptions options=FMS_Data::CpFileOptions()) -> int
    """
  return _VISHNU.mv(*args, **kwargs)

def amv(*args, **kwargs):
  """
    amv(std::string const & sessionKey, std::string const & src, std::string const & dest, 
        FileTransfer transferInfo, CpFileOptions options=FMS_Data::CpFileOptions()) -> int
    """
  return _VISHNU.amv(*args, **kwargs)

def rm(*args, **kwargs):
  """rm(std::string const & sessionKey, std::string const & path, RmFileOptions options=FMS_Data::RmFileOptions()) -> int"""
  return _VISHNU.rm(*args, **kwargs)

def rmdir(*args, **kwargs):
  """rmdir(std::string const & sessionKey, std::string const & path) -> int"""
  return _VISHNU.rmdir(*args, **kwargs)

def tail(*args, **kwargs):
  """tail(std::string const & sessionKey, std::string const & path, TailOfFileOptions options=FMS_Data::TailOfFileOptions()) -> int"""
  return _VISHNU.tail(*args, **kwargs)

def stat(*args, **kwargs):
  """stat(std::string const & sessionKey, std::string const & path, FileStat filesInfo) -> int"""
  return _VISHNU.stat(*args, **kwargs)

def stopFileTransfer(*args, **kwargs):
  """stopFileTransfer(std::string const & sessionKey, StopTransferOptions options=FMS_Data::StopTransferOptions()) -> int"""
  return _VISHNU.stopFileTransfer(*args, **kwargs)

def listFileTransfers(*args, **kwargs):
  """listFileTransfers(std::string const & sessionKey, LsTransferOptions options=FMS_Data::LsTransferOptions()) -> int"""
  return _VISHNU.listFileTransfers(*args, **kwargs)
# This file is compatible with both classic and new-style classes.


